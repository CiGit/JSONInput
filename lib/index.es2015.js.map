{"version":3,"file":"index.es2015.js","sources":["../src/Store/index.tsx","../src/Comps/defaultWidgets.tsx","../src/Comps/Fields/Widget.tsx","../src/Utils/customValidator.ts","../src/Store/actions.ts","../src/Comps/Decorators/validator.tsx","../src/Comps/Fields/Object.tsx","../src/Comps/Fields/String.tsx","../src/Comps/Fields/Number.tsx","../src/Comps/Fields/Boolean.tsx","../src/Comps/Fields/Array.tsx","../src/Comps/Fields/index.tsx","../src/Comps/Fields/Undefined.tsx","../src/Utils/infer.ts","../src/Comps/SchemaType.tsx","../src/Comps/Decorators/visible.tsx","../src/Comps/Decorators/inference.tsx","../src/Comps/Decorators/fromDefaultValue.tsx","../src/Comps/Container.tsx"],"sourcesContent":["import * as React from 'react';\nimport immer, { Immutable } from 'immer';\n\ninterface StoreProps {\n  value?: {};\n  schema: {};\n  onValueChange: (value: {}) => void;\n  children: (props: {\n    dispatch: (\n      action: (state: any, ...extraArgs: any[]) => void,\n      ...args: any[]\n    ) => void;\n    schema: {};\n    value: {};\n    status: {};\n  }) => JSX.Element;\n}\nexport interface FormContext {\n  value: Immutable<{}> | undefined | null;\n  schema: {};\n  status: {};\n}\nconst FormContext = React.createContext<FormContext>({\n  value: undefined,\n  schema: {},\n  status: {},\n});\nexport const FormConsumer = FormContext.Consumer;\nexport class Store extends React.Component<StoreProps> {\n  readonly state = {\n    schema: {},\n    value: {},\n    extValue: {},\n    status: {},\n    oldProps: {},\n  };\n  static getDerivedStateFromProps(\n    nextProps: StoreProps,\n    state: {\n      schema: {};\n      value: {};\n      status: {};\n      oldProps: StoreProps;\n      extValue: {} | undefined;\n    },\n  ) {\n    if (state.oldProps !== nextProps) {\n      const ret: Partial<typeof Store.prototype.state> = {\n        value: nextProps.value,\n        schema: nextProps.schema,\n        oldProps: nextProps,\n      };\n      if (nextProps.value !== state.extValue) {\n        ret.status = {};\n        ret.extValue = nextProps.value;\n      }\n      return ret;\n    }\n    return null;\n  }\n  dispatch = (\n    action: (state: any, ...extraArgs: any[]) => void,\n    ...args: any[]\n  ) => {\n    this.setState(prevState => {\n      return (immer(action) as (state: any, ...extraArgs: any[]) => any)(\n        prevState,\n        ...args,\n      );\n    });\n  };\n  shouldComponentUpdate(nextProps: any, nextState: any) {\n    return this.state !== nextState;\n  }\n  componentDidUpdate(prevProps: StoreProps, prevState: { value: {} }) {\n    if (\n      this.state.value !== prevState.value &&\n      // This is not an update due to a props change.\n      this.props.value === prevProps.value\n    ) {\n      const extValue = this.state.value;\n      this.setState({ extValue }, () => this.props.onValueChange(extValue));\n    }\n  }\n  render() {\n    const { schema, value, status } = this.state;\n    const cloneValue =\n      value != null ? JSON.parse(JSON.stringify(value)) : value;\n    return (\n      <FormContext.Provider\n        value={{\n          schema,\n          value: cloneValue,\n          status,\n        }}\n      >\n        {this.props.children({\n          schema,\n          value: cloneValue,\n          status,\n          dispatch: this.dispatch,\n        })}\n      </FormContext.Provider>\n    );\n  }\n}\n","import * as React from 'react';\nimport { WidgetProps } from '../../typings/types';\n\nexport type WidgetMap = {\n  [key: string]: React.ComponentType<WidgetProps>;\n};\n\nfunction undefinedWidgetFactory(type: string) {\n  return function UndefinedWidget() {\n    return <span>{`Widget for '${type}' was not defined`}</span>;\n  };\n}\nlet DefaultWidget: WidgetMap = {};\n\nfunction defaultWidget(type: string) {\n  return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj: WidgetMap) {\n  DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets };\n","import * as React from 'react';\nimport { Schema, TYPESTRING } from '../../../typings/types';\nimport { FormContext } from '../../Store';\nimport { defaultWidget } from '../defaultWidgets';\n\ntype Props = {\n  value?: {};\n  schema: Schema;\n  editKey: string;\n  __tree: FormContext;\n  onChange: (value: any) => void;\n  errorMessage?: string[];\n  path: string[];\n  children?: JSX.Element[];\n  addKey?: (key: string, value: {}) => void;\n  removeKey?: (key: string) => void;\n  alterKey?: (key: string, newKey: string) => void;\n  onChildAdd?: () => void;\n  onChildRemove?: (index: number) => void;\n};\n\nconst EMPTYOBJECT = {};\nfunction Widget<P extends Props>(props: P) {\n  const {\n    value,\n    schema,\n    schema: { view },\n    __tree: { value: formVal },\n    children,\n    editKey,\n    path,\n    onChange,\n    onChildAdd,\n    onChildRemove,\n    addKey,\n    removeKey,\n    alterKey,\n    errorMessage,\n  } = props;\n  const forwardProps = {\n    value,\n    schema,\n    children,\n    editKey,\n    path,\n    onChange,\n    onChildAdd,\n    onChildRemove,\n    addKey,\n    removeKey,\n    alterKey,\n    errorMessage,\n  };\n  if (view) {\n    const { type } = view;\n    if (typeof type === 'string') {\n      const Wdgt = defaultWidget(type);\n      return <Wdgt {...forwardProps} formValue={formVal} view={view} />;\n    }\n    if (typeof type === 'function') {\n      const Type = type;\n      return <Type {...forwardProps} formValue={formVal} view={view} />;\n    }\n  }\n  let renderType = Array.isArray(schema.type)\n    ? (schema.type as TYPESTRING[]).find(t => t !== 'null')\n    : schema.type;\n  let Wdgt;\n  if (renderType === undefined) {\n    Wdgt = defaultWidget('undefinedType');\n  } else {\n    Wdgt = defaultWidget(renderType);\n  }\n  return (\n    <Wdgt\n      {...forwardProps}\n      formValue={formVal}\n      view={view || EMPTYOBJECT}\n    />\n  );\n}\n\nexport default Widget;\n","import * as jsonschema from 'jsonschema';\nimport { ValidatorResult } from 'jsonschema/lib';\nimport { Schema, ErrorFn } from '../../typings/types';\n\nconst customValidator = new jsonschema.Validator();\ncustomValidator.attributes.errored = function validateErrored(\n  instance: {},\n  schema: { errored?: ErrorFn },\n  options: { formValue: {}; ctx: { basePath?: string[] } },\n  ctx: { propertyPath: String },\n) {\n  if (typeof schema.errored !== 'function') {\n    throw new jsonschema.SchemaError('\"errored\" expects a function');\n  }\n  const path = (options.ctx.basePath || []).concat(\n    ctx.propertyPath.split('.').slice(1),\n  );\n  const msg = schema.errored(instance, options.formValue, path);\n  if (msg) {\n    return msg;\n  }\n  return undefined;\n};\nfunction validate(\n  value: {} | undefined | null,\n  schema: Schema,\n  formValue?: {} | undefined | null,\n  basePath?: string[],\n): ValidatorResult {\n  return customValidator.validate(value, schema, {\n    formValue: formValue || {},\n    ctx: {\n      basePath,\n    },\n  });\n}\n\nexport default validate;\n","import { ValidationError } from 'jsonschema/lib';\nimport { get, unset, setWith } from 'lodash-es';\n\nconst VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = '$$$state';\nconst ERRORS = '$$$errors';\nconst NO_ERRORS: string[] = [];\n\nfunction setErrors(state: any, path: string[] = [], errors: string[]) {\n  const errorPath = [STATUS].concat(path).concat([ERRORS]);\n  setWith(state, errorPath, errors, Object);\n}\nexport function setValidationErrors(\n  state: any,\n  path: string[] = [],\n  errors: ValidationError[],\n) {\n  const errorMap = new Map<string, string[]>();\n  // Collect each error associated with a given path\n  errors.forEach(error => {\n    const errors = errorMap.get(error.property) || [];\n    errors.push(error.message); // Add new error\n    errorMap.set(error.property, errors);\n  });\n  setErrors(state, path, NO_ERRORS);\n  errorMap.forEach((value, key) => {\n    setErrors(\n      state,\n      path.concat(\n        key\n          .split(/\\.|\\[|\\]/)\n          .filter(x => x !== '')\n          .slice(1),\n      ),\n      value,\n    );\n  });\n}\n\n/**\n * Update a value in the tree\n *\n * @param state the tree\n * @param path path's value to update\n * @param value value to set\n * @param errors errors relative to the value\n */\nexport function update(\n  state: any,\n  path: string[] = [],\n  value: {},\n  errors: ValidationError[],\n) {\n  const statusPath = [STATUS].concat(path);\n  setWith(state, [VALUE].concat(path), value, Object);\n  setWith(state, statusPath.concat([STATE]), 'dirty', Object);\n  setValidationErrors(state, path, errors);\n}\n\nexport function setDefaultValue(state: any, path: string[] = [], value: {}) {\n  update(state, path, value, []);\n  setWith(state, [STATUS].concat(path).concat([STATE]), 'pristine', Object);\n}\n\n/**\n * Unset given path\n * @param state the tree\n * @param path path to value\n */\nexport function destroy(state: any, path: string[] = []) {\n  try {\n    unset(state, [STATUS].concat(path));\n  } catch (e) {\n    // Maybe already destroyed\n  }\n}\n\n// GETTERS, DO NOT USE with a dispatcher\n\nexport function getErrors(state: any, path: string[] = []) {\n  return get(state, [STATUS].concat(path).concat([ERRORS])) || NO_ERRORS;\n}\n","import * as React from 'react';\nimport validate from './../../Utils/customValidator';\nimport { getErrors } from '../../Store/actions';\n\nimport { Schema, Action } from '../../../typings/types';\nimport { ValidationError } from 'jsonschema/lib';\nimport { FormConsumer } from '../../Store';\n\ntype Props = {\n  schema: Schema;\n  value?: any;\n  dispatch: (action: Action, ...args: {}[]) => any;\n  path: string[];\n  onChange: (value: any, errors?: ValidationError[]) => void;\n};\n\nfunction validated<P extends Props>(\n  Comp: React.ComponentType<P & { errorMessage?: string[] }>,\n) {\n  class Validator extends React.Component<P & { __tree: any; path: string[] }> {\n    onChange = (val?: {}) => {\n      const validation = validate(\n        val,\n        this.props.schema,\n        this.props.__tree.value,\n        this.props.path,\n      );\n      this.props.onChange(val, validation.errors);\n    };\n    shouldComponentUpdate(nextProps: P & { __tree: any }) {\n      return (\n        this.props.value !== nextProps.value ||\n        this.props.schema !== nextProps.schema ||\n        getErrors(this.props.__tree, this.props.path) !==\n          getErrors(nextProps.__tree, nextProps.path)\n      );\n    }\n    render() {\n      const { path } = this.props;\n      return (\n        <Comp\n          {...this.props}\n          errorMessage={getErrors(this.props.__tree, path)}\n          onChange={this.onChange}\n        />\n      );\n    }\n  }\n  return (p: P) => {\n    return (\n      <FormConsumer>{tree => <Validator {...p} __tree={tree} />}</FormConsumer>\n    );\n  };\n}\n\nexport default validated;\n","import * as React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from './Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\nimport { FormContext } from '../../Store';\n\ntype Props = {\n  schema: Schema.Object;\n  status: { [key: string]: {} };\n  dispatch: (action: Action, ...args: ({} | undefined)[]) => any;\n  editKey: string;\n  __tree: FormContext;\n  value: {\n    [key: string]: {};\n  };\n  path: string[];\n  onChange: (value: {}) => void;\n};\n/**\n * Get schema from properties field\n * @param schema Object's schema\n * @param prop prop to get schema for\n */\nfunction schemaFromProperties(schema: Schema.Object, prop: string) {\n  const { properties = {} } = schema;\n  if (prop in properties) {\n    return properties[prop];\n  }\n}\n/**\n * Retrieve **first** matching schema from patternProperties\n * @param schema Object's schema\n * @param prop prop to get schema for\n */\nfunction schemaFromPattern(schema: Schema.Object, prop: string) {\n  const patternProperties = schema.patternProperties || {};\n  const patterns = Object.keys(patternProperties);\n  const p = patterns.find(p => new RegExp(p).test(prop));\n  if (p) {\n    return patternProperties[p];\n  }\n}\n/**\n * Get schema for a given property\n * @param schema Object's schema\n * @param prop prop to get schema for\n */\nfunction schemaForProp(schema: Schema.Object, prop: string) {\n  return (\n    schemaFromProperties(schema, prop) ||\n    schemaFromPattern(schema, prop) ||\n    schema.additionalProperties\n  );\n}\nconst EMPTY_OBJECT = {};\n\nfunction renderChildren(props: Props) {\n  const children = [];\n  const properties = props.schema.properties || {};\n  const value: { [key: string]: {} } = props.value || {};\n  // Holds schema properties and value properties missing from schema.\n  const mergedProperties: Array<string> = Object.keys(properties);\n\n  Object.keys(value).forEach(v => {\n    if (v in properties) {\n      return;\n    }\n    mergedProperties.push(v);\n  });\n  function indexFor(property: string): number {\n    if (properties[property]) {\n      const index = properties[property].index;\n      if (typeof index === 'number') {\n        return index;\n      }\n    }\n    return 0;\n  }\n  // Index based sorting\n  function sortProperties(a: string, b: string): number {\n    return indexFor(a) - indexFor(b);\n  }\n\n  mergedProperties.sort(sortProperties);\n  for (let i: number = 0; i < mergedProperties.length; i += 1) {\n    const prop: string = mergedProperties[i];\n    const propSchema = schemaForProp(props.schema, prop);\n    children.push(\n      <SchemaType\n        {...props}\n        status={props.status[prop] || EMPTY_OBJECT}\n        schema={propSchema}\n        value={value[prop]}\n        editKey={prop}\n        key={i}\n      />,\n    );\n  }\n  return children;\n}\n\nfunction ObjectField(props: Props) {\n  function addKey(key: string, value: {}): void {\n    if (typeof props.value === 'object' && key in props.value) {\n      throw new Error(`Property \"${key}\" already exists`);\n    }\n    props.onChange(\n      Object.assign({}, props.value, {\n        [key]: value,\n      }),\n    );\n  }\n\n  function removeKey(key: string): void {\n    const value: { [key: string]: {} } = Object.assign({}, props.value);\n    delete value[key];\n    props.onChange(value);\n  }\n\n  function alterKey(key: string, newKey: string): void {\n    if (key === newKey) {\n      return;\n    }\n    if (newKey in props.value) {\n      throw new Error(`Property \"${newKey}\" already exists`);\n    }\n    const value: { [key: string]: {} } = {};\n    Object.keys(props.value).forEach(p => {\n      if (p !== key) {\n        value[p] = props.value[p];\n      } else {\n        value[newKey] = props.value[p];\n      }\n    });\n    props.onChange(value);\n  }\n  return (\n    <Widget\n      {...props}\n      addKey={addKey}\n      removeKey={removeKey}\n      alterKey={alterKey}\n    >\n      {renderChildren(props)}\n    </Widget>\n  );\n}\n\nexport default validator(ObjectField);\n","import * as React from 'react';\nimport Widget from './Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\nimport { FormContext } from '../../Store';\n\ntype Props = {\n  schema: Schema & { type: 'number' | 'string' };\n  value?: number | string;\n  editKey: string;\n  path: string[];\n  __tree: FormContext;\n  onChange: (value: string | number) => void;\n  dispatch: (action: Action, ...args: {}[]) => any;\n};\n\nfunction StringField(props: Props) {\n  return <Widget {...props} />;\n}\n\nexport { StringField as SimpleStringField };\nexport default validator<Props>(StringField);\n","import * as React from 'react';\nimport validator from '../Decorators/validator';\nimport { SimpleStringField } from './String';\nimport { Schema, Action } from '../../../typings/types';\nimport { FormContext } from '../../Store';\n\ninterface Props {\n  schema: Schema & { type: 'number' | 'string' };\n  value?: number;\n  editKey: string;\n  path: string[];\n  __tree: FormContext;\n  dispatch: (action: Action, ...args: {}[]) => any;\n  onChange: (value: string | void | number) => void;\n}\n/**\n * Transform to numeric value or undefined. Used to compare exp,\n * binary, hexa, ... strings\n * @param value value to convert\n */\nfunction toNumber(value?: string | number) {\n  switch (typeof value) {\n    case 'number':\n      return value;\n    case 'string':\n      return value === '' ? undefined : Number(value);\n    default:\n      return undefined;\n  }\n}\nclass NumberField extends React.Component<Props, { value?: string | number }> {\n  static getDerivedStateFromProps = (\n    props: Props,\n    state: { value?: string | number },\n  ) => {\n    if (toNumber(state.value) !== toNumber(props.value)) {\n      return {\n        value: props.value,\n      };\n    }\n    return null;\n  };\n  state = { value: this.props.value };\n  onChange = (val?: string | number) => {\n    const value: string | number | undefined = val === '' ? undefined : val;\n    const numVal = Number(value);\n    this.setState(\n      {\n        value,\n      },\n      () => this.props.onChange(isNaN(numVal) ? value : numVal),\n    );\n  };\n  render() {\n    return (\n      <SimpleStringField\n        {...this.props}\n        value={this.state.value}\n        onChange={this.onChange}\n      />\n    );\n  }\n}\nexport default validator<Props>(NumberField);\n","import * as React from 'react';\nimport Widget from './Widget';\nimport validator from './../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\nimport { FormContext } from '../../Store';\ninterface Props {\n  schema: Schema & { type: 'boolean' };\n  editKey: string;\n  path: string[];\n  __tree: FormContext;\n  value: boolean;\n  onChange: (value?: boolean) => void;\n  dispatch: (action: Action, ...args: {}[]) => any;\n}\nfunction BooleanField(props: Props) {\n  return <Widget {...props} />;\n}\n\nexport default validator(BooleanField);\n","import * as React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from './Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\nimport { FormContext } from '../../Store';\n\ntype Props = {\n  onChange: (val: {}[]) => void;\n  schema: Schema.Array;\n  dispatch: (action: Action, ...args: ({} | undefined)[]) => any;\n  value?: {}[];\n  __tree: FormContext;\n  editKey: string;\n  status: { [key: string]: {} };\n  path: string[];\n  [key: string]: any;\n};\nconst EMPTY_OBJECT = {};\n\nfunction onChildRemove(props: Props) {\n  return function onRemove(index: number) {\n    const oldValue = props.value || [];\n    props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n  };\n}\n\nfunction onChildAdd(props: Props) {\n  return function onAdd(value?: {}) {\n    const oldValue = props.value || [];\n    props.onChange(oldValue.concat([value]));\n  };\n}\n\nfunction renderChildren(props: Props) {\n  const {\n    value,\n    schema: { items },\n  } = props;\n  let valueItems: {}[];\n  if (value) {\n    valueItems = value;\n  } else {\n    valueItems = [];\n  }\n  const children: JSX.Element[] = [];\n  valueItems.forEach((val, i) =>\n    children.push(\n      <SchemaType\n        {...props}\n        schema={Array.isArray(items) ? items[i] || {} : items}\n        value={val}\n        editKey={String(i)}\n        status={props.status[String(i)] || EMPTY_OBJECT}\n        key={i}\n      />,\n    ),\n  );\n  return children;\n}\n\nfunction ArrayField(props: Props) {\n  return (\n    <Widget\n      {...props}\n      onChildAdd={onChildAdd(props)}\n      onChildRemove={onChildRemove(props)}\n    >\n      {renderChildren(props)}\n    </Widget>\n  );\n}\n\nexport default validator<Props>(ArrayField);\n","import ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n  object: ObjectField,\n  string: StringField,\n  number: NumberField,\n  boolean: BooleanField,\n  array: ArrayField,\n};\n","import * as React from 'react';\n\nimport { WidgetProps } from '../../../typings/types';\n\nfunction Undefined(props: WidgetProps) {\n  return (\n    <div>{`Undefined field type \"${props.schema.type!.toString()}\", [${props.path.toString()}]`}</div>\n  );\n}\n\nexport default Undefined;\n","export default function infer(value?: {} | undefined | null) {\n  switch (typeof value) {\n    case 'number':\n      return 'number';\n    case 'string':\n      return 'string';\n    case 'boolean':\n      return 'boolean';\n    case 'object':\n      return Array.isArray(value) ? 'array' : 'object';\n    default:\n      return 'string';\n  }\n}\n","import * as React from 'react';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\nimport fromDefaultValue from './Decorators/fromDefaultValue';\nimport { update, destroy } from '../Store/actions';\n\nimport { Schema, Action, TYPESTRING } from '../../typings/types';\n\ntype SchemaProps = {\n  schema: Schema;\n  status: { [key: string]: {} };\n  path: string[];\n  dispatch: (action: Action, ...args: ({} | undefined)[]) => any;\n  editKey?: string;\n  value?: {};\n};\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType<P extends SchemaProps> extends React.Component<P> {\n  static defaultProps = {\n    path: [],\n  };\n  constructor(props: P) {\n    super(props);\n    this.onChange = this.onChange.bind(this);\n  }\n  onChange(...args: {}[]) {\n    this.props.dispatch(update, this.props.path, ...args);\n  }\n  componentWillUnmount() {\n    this.props.dispatch(destroy, this.props.path);\n  }\n  render() {\n    const {\n      schema: { type },\n    } = this.props;\n    const renderType = Array.isArray(type)\n      ? (type as TYPESTRING[]).find(t => t !== 'null')\n      : type;\n    let Type: React.ComponentType<any>;\n    if (renderType === undefined || renderType === 'null') {\n      Type = UndefinedField;\n    } else {\n      Type = Fields[renderType];\n    }\n    if (Type === undefined) {\n      Type = UndefinedField;\n    }\n    return <Type {...this.props} onChange={this.onChange} />;\n  }\n}\nexport default inference(fromDefaultValue(visible(SchemaType)));\n","import * as React from 'react';\nimport { Action, Schema } from '../../../typings/types';\nimport { FormConsumer } from '../../Store';\n\ntype Props = {\n  schema: Schema;\n  path: string[];\n  value?: {};\n  dispatch: (action: Action, ...args: {}[]) => any;\n};\nfunction visibility<P extends Props>(\n  Comp: React.ComponentType<P>,\n): React.FunctionComponent<P> {\n  return function Visible(props: P) {\n    const {\n      schema: { visible },\n      value,\n    } = props;\n\n    return (\n      <FormConsumer>\n        {({ value: formValue }) => {\n          try {\n            if (\n              visible &&\n              !visible(\n                value,\n                formValue,\n                props.path.concat(), // Copy\n              )\n            ) {\n              return null!;\n            }\n          } catch (e) {\n            return null!;\n          }\n          return <Comp {...props} />;\n        }}\n      </FormConsumer>\n    );\n  };\n}\n\nexport default visibility;\n","import * as React from 'react';\nimport infer from './../../Utils/infer';\nimport { Schema } from '../../../typings/types';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath: string[], editKey?: string): string[] {\n  if (editKey !== undefined) {\n    return currentPath.concat([editKey]);\n  }\n  return currentPath;\n}\ninterface InferProps {\n  path: string[];\n  editKey?: string;\n  value?: {};\n  schema: Schema;\n}\ninterface InferState {\n  schema: Schema;\n  path: string[];\n  oldPath?: string[];\n  oldEditKey?: string;\n  oldValue?: {};\n}\n/**\n * Remove specified keys.\n */\ntype Omit<Type, Keys extends keyof Type> = Pick<\n  Type,\n  Exclude<keyof Type, Keys>\n>;\n\n/**\n * Make specified key optional. Others don't change.\n */\ntype PartialKey<Type, Keys extends keyof Type> = Omit<Type, Keys> &\n  Partial<Pick<Type, Keys>>;\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param Comp component to decorate.\n * @return the decorated component.\n */\nfunction inference<P extends InferProps>(Comp: React.ComponentType<P>) {\n  type PartialSchemaProps = PartialKey<P, 'schema'>;\n  class Infer extends React.Component<PartialSchemaProps, InferState> {\n    state: InferState = {\n      path: [],\n      schema: {},\n    };\n    static getDerivedStateFromProps(\n      nextProps: PartialSchemaProps,\n      curState: InferState,\n    ): Partial<InferState> {\n      let nextState: Partial<InferState> = {};\n      if (\n        curState.oldEditKey !== nextProps.editKey ||\n        curState.oldPath !== nextProps.path\n      ) {\n        nextState.path = updatePath(nextProps.path, nextProps.editKey);\n        nextState.oldPath = nextProps.path;\n        nextState.oldEditKey = nextProps.editKey;\n      }\n      if (\n        curState.schema !== nextProps.schema ||\n        infer(nextProps.value) !== infer(curState.oldValue)\n      ) {\n        let inferredSchema = nextProps.schema || {};\n        if (!('type' in inferredSchema)) {\n          inferredSchema = {\n            type: infer(nextProps.value),\n            ...inferredSchema,\n          };\n        }\n        nextState.schema = inferredSchema;\n        // nextState.oldSchema = nextProps.schema;\n      }\n      return nextState;\n    }\n\n    render() {\n      const { type } = this.state.schema;\n      return (\n        // @ts-ignore https://github.com/Microsoft/TypeScript/issues/28748\n        <Comp\n          // Recreate component on type change\n          key={Array.isArray(type) ? undefined : type}\n          {...this.props}\n          path={this.state.path}\n          schema={this.state.schema}\n        />\n      );\n    }\n  }\n  return Infer;\n}\n\nexport default inference;\n","import * as React from 'react';\nimport { cloneDeep } from 'lodash-es';\nimport { setDefaultValue } from '../../Store/actions';\nimport { Action, Schema } from '../../../typings/types';\n\nexport type Props = {\n  editKey?: string;\n  path: string[];\n  status: {\n    $$$state?: string;\n  };\n  value?: {};\n  schema: Schema;\n  dispatch: (action: Action, ...args: ({} | undefined)[]) => any;\n};\nfunction updateDefault({\n  value,\n  schema: { value: defaultValue },\n  dispatch,\n  path,\n}: Props) {\n  const val = value !== undefined ? value : cloneDeep(defaultValue);\n  if (val !== value) {\n    dispatch(setDefaultValue, path, val);\n  }\n  return val;\n}\n\nfunction fromDefaultValue<P extends Props>(Comp: React.ComponentType<P>) {\n  class DefaultValue extends React.Component<P, { val?: {}; init: boolean }> {\n    static getDerivedStateFromProps(nextProps: P, state: { init: boolean }) {\n      if (state.init) {\n        return { init: false };\n      }\n      return {\n        val: nextProps.value,\n      };\n    }\n    state = { val: updateDefault(this.props), init: true };\n    render() {\n      return <Comp {...this.props} value={this.state.val} />;\n    }\n  }\n\n  return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","import * as React from 'react';\nimport { Store } from '../Store/index';\nimport SchemaType from './SchemaType';\nimport validate from './../Utils/customValidator';\nimport { setValidationErrors } from '../Store/actions';\n\nimport { Schema } from '../../typings/types';\n\nconst EMPTY_ARRAY: any[] = [];\n\nexport type Props = {\n  onChange: (value: {} | undefined, errors: {}[]) => void;\n  schema: Schema;\n  value?: {};\n};\n/**\n * Top Component\n */\nclass Container extends React.Component<Props> {\n  store: Store | null = null;\n  static defaultProps = { schema: {} };\n  getValue() {\n    return this.store!.state.value;\n  }\n  update = (value: {} | undefined) => {\n    this.props.onChange(\n      value,\n      validate(value, this.props['schema'], value).errors,\n    );\n  };\n  validate() {\n    const validationResult = validate(\n      this.store!.state.value,\n      this.store!.state.schema,\n      this.store!.state.value,\n    );\n    this.store!.dispatch(setValidationErrors, [], validationResult.errors);\n    return validationResult.errors;\n  }\n  render() {\n    return (\n      <Store\n        ref={s => {\n          this.store = s;\n        }}\n        value={this.props.value}\n        schema={this.props.schema}\n        onValueChange={this.update}\n      >\n        {({ schema, value, status, dispatch }) => (\n          <SchemaType\n            schema={schema}\n            dispatch={dispatch}\n            value={value}\n            path={EMPTY_ARRAY}\n            status={status}\n          />\n        )}\n      </Store>\n    );\n  }\n}\n\nexport default Container;\n"],"names":["FormContext","React","value","undefined","schema","status","FormConsumer","Consumer","Store","extValue","oldProps","action","args","setState","prevState","immer","getDerivedStateFromProps","nextProps","state","ret","shouldComponentUpdate","nextState","this","componentDidUpdate","prevProps","props","_this2","onValueChange","render","cloneValue","JSON","parse","stringify","React.createElement","Provider","children","dispatch","DefaultWidget","defaultWidget","type","undefinedWidgetFactory","setDefaultWidgets","obj","Object","assign","EMPTYOBJECT","Widget","view","formVal","__tree","forwardProps","editKey","path","onChange","onChildAdd","onChildRemove","addKey","removeKey","alterKey","errorMessage","Wdgt","_Wdgt","formValue","renderType","Array","isArray","find","t","customValidator","jsonschema","validate","basePath","ctx","attributes","errored","instance","options","concat","propertyPath","split","slice","msg","VALUE","STATUS","STATE","ERRORS","NO_ERRORS","setErrors","errors","errorPath","setWith","setValidationErrors","errorMap","Map","forEach","error","get","property","push","message","set","key","filter","x","update","statusPath","setDefaultValue","destroy","unset","e","getErrors","validated","Comp","Validator","val","validation","_this","p","tree","schemaForProp","prop","properties","schemaFromProperties","patternProperties","keys","RegExp","test","schemaFromPattern","additionalProperties","EMPTY_OBJECT","validator","Error","newKey","mergedProperties","indexFor","index","v","sort","a","b","i","length","propSchema","SchemaType","renderChildren","StringField","toNumber","Number","NumberField","numVal","isNaN","SimpleStringField","oldValue","object","ObjectField","string","number","BooleanField","array","items","String","Undefined","toString","infer","bind","componentWillUnmount","Type","UndefinedField","Fields","curState","currentPath","oldEditKey","oldPath","inferredSchema","inference","defaultValue","cloneDeep","init","fromDefaultValue","visible","EMPTY_ARRAY","Container","getValue","store","validationResult","ref","s"],"mappings":"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"}