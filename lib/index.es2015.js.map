{"version":3,"file":"index.es2015.js","sources":["../src/Store/index.js","../src/Comps/Views/undefinedWidgetFactory.js","../src/Comps/Decorators/labeled.js","../src/Comps/Views/Input.js","../src/Comps/Views/TextWidget.js","../src/Comps/Views/ArrowNumberWidget.js","../src/Comps/Views/CheckboxWidget.js","../src/Comps/Views/ArrayWidget.js","../src/Comps/Views/ObjectWidget.js","../src/Comps/Views/SelectWidget.js","../src/Comps/Views/index.js","../src/Comps/Views/Widget.js","../src/Utils/customValidator.js","../src/Store/actions.js","../src/Comps/Decorators/validator.js","../src/Comps/Fields/Object.js","../src/Comps/Fields/String.js","../src/Comps/Fields/Number.js","../src/Comps/Fields/Boolean.js","../src/Comps/Fields/Array.js","../src/Comps/Fields/index.js","../src/Comps/Decorators/visible.js","../src/Comps/Fields/Undefined.js","../src/Utils/infer.js","../src/Comps/Decorators/inference.js","../src/Comps/Decorators/fromDefaultValue.js","../src/Comps/SchemaType.js","../src/Comps/Container.js"],"sourcesContent":["// @flow\nimport Baobab from 'baobab';\n\nconst createTree = () => new Baobab({\n    schema: {},\n    value: {},\n    status: {}\n});\n\nexport default createTree;\n","// @flow\nimport React from 'react';\n\nfunction undefinedWidgetFactory(\n    type: string\n): (...props: mixed[]) => React$Element<*> {\n    return function UndefinedWidget() {\n        return (\n            <span>\n                {`Widget for '${type}' was not defined`}\n            </span>\n        );\n    };\n}\n\nexport default undefinedWidgetFactory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction labeled(Comp) {\n    function Label(props) {\n        const required = props.schema.required;\n        const requiredClassName = required ? 'required' : '';\n        return (\n            <div>\n                <label //eslint-disable-line\n                    className={`${props.schema.type}Field ${requiredClassName}`}\n                >\n                    <span className=\"title\">{props.view.title || props.editKey}</span>\n                    <Comp {...props} />\n                    <span>{props.view.description}</span>\n                    <span>{props.errorMessage}</span>\n                </label>\n            </div>\n        );\n    }\n\n    Label.propTypes = {\n        schema: PropTypes.shape({\n            type: PropTypes.oneOfType([\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n                PropTypes.arrayOf(\n                    PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n                )\n            ]).isRequired,\n            required: PropTypes.bool,\n            description: PropTypes.string\n        }).isRequired,\n        editKey: PropTypes.string,\n        view: PropTypes.shape({\n            title: PropTypes.string,\n            description: PropTypes.string\n        }).isRequired,\n        errorMessage: PropTypes.arrayOf(PropTypes.string)\n    };\n    Label.defaultProps = {\n        editKey: '',\n        errorMessage: []\n    };\n    return Label;\n}\n\nexport default labeled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction onInputChange(func) {\n    return function onChange(event) {\n        if (event.target.type === 'checkbox') {\n            func(event.target.checked);\n        } else {\n            func(event.target.value);\n        }\n    };\n}\n\nfunction Input(props) {\n    return (\n        <input\n            type={props.type}\n            placeholder={props.schema.placeholder}\n            value={props.value || ''}\n            className={props.className}\n            onChange={onInputChange(props.onChange)}\n            checked={props.checked}\n        />\n    );\n}\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool,\n    value: PropTypes.any, // eslint-disable-line\n    schema: PropTypes.shape({\n        placeholder: PropTypes.string\n    }).isRequired\n};\nInput.defaultProps = {\n    className: undefined,\n    checked: false\n};\nexport default Input;\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction TextWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"string\"\n        />\n    );\n}\n\nexport default labeled(TextWidget);\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction ArrowNumberWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n        />\n    );\n}\n\nexport default labeled(ArrowNumberWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction CheckboxWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"checkbox\"\n            checked={props.value}\n        />\n    );\n}\n\nCheckboxWidget.propTypes = {\n    value: PropTypes.bool\n};\nCheckboxWidget.defaultProps = { value: false };\n\nexport default labeled(CheckboxWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ArrayWidget(props) {\n    function renderChild(child, index) {\n        return (\n            <div>\n                <button\n                    onClick={function remove() {\n                        props.onChildRemove(index);\n                    }}\n                >\n                    -\n                </button>\n                {child}\n            </div>\n        );\n    }\n\n    const children = React.Children.map(props.children, renderChild);\n    return (\n        <div>\n            <div>\n                {children}\n            </div>\n            <button onClick={props.onChildAdd}>+</button>\n        </div>\n    );\n}\n\nArrayWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired,\n    onChildRemove: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n    onChildAdd: PropTypes.func.isRequired\n};\nexport default labeled(ArrayWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ObjectWidget(props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    );\n}\n\nObjectWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\n\nexport default labeled(ObjectWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectWidget({ view, value, onChange }) {\n    const choices = view.choices.map(c => (\n        <option\n            key={c.value}\n            value={c.value}\n        >\n            {c.label}\n        </option>\n    ));\n    return (\n        <select value={value} onChange={e => onChange(e.target.value)}>\n            {choices}\n        </select>\n    );\n}\nSelectWidget.propTypes = {\n    view: PropTypes.shape({\n        choices: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.any,\n            label: PropTypes.string.isRequired\n        })).isRequired\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line\n    onChange: PropTypes.func.isRequired\n};\nexport default SelectWidget;\n","// @flow\nimport undefinedWidgetFactory from './undefinedWidgetFactory';\nimport TextWidget from './TextWidget';\nimport ArrowNumberWidget from './ArrowNumberWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport ArrayWidget from './ArrayWidget';\nimport ObjectWidget from './ObjectWidget';\nimport SelectWidget from './SelectWidget';\n\nimport type { WidgetProp } from '../../types.js.flow';\n\ntype WidgetMap = {\n    [string]:\n        | Class<React$Component<*, WidgetProp, *>>\n        | ((props: WidgetProp) => React$Element<*>)\n};\nlet DefaultWidget: WidgetMap = {\n    string: TextWidget,\n    number: TextWidget,\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: ObjectWidget,\n    arrowNumber: ArrowNumberWidget,\n    select: SelectWidget\n};\n\nfunction defaultWidget(type: string) {\n    return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj: WidgetMap) {\n    DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets, undefinedWidgetFactory };\n","// @flow\nimport React from 'react';\nimport { defaultWidget } from './index';\n\nimport type { Schema, WidgetProp } from '../../types.js.flow';\n\ntype Props = {\n    value: mixed,\n    onChange: (value: any) => void,\n    schema: Schema,\n    editKey: string,\n    path: string[],\n    children?: React$Element<*>,\n    addKey?: (key: string, value: mixed) => void,\n    removeKey?: (key: string) => void,\n    alterKey?: (key: string, newKey: string) => void,\n    onChildAdd?: () => void,\n    onChildRemove?: (index: number) => void,\n    errorMessage?: string\n};\n\nconst EMPTYOBJECT = {};\nfunction Widget(props: Props): React$Element<WidgetProp> {\n    const {\n        value,\n        schema,\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage\n    } = props;\n    const forwardProps = {\n        value,\n        schema,\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage\n    };\n    const { view } = schema;\n    if (view) {\n        const { type } = view;\n        if (typeof type === 'string') {\n            const Wdgt = defaultWidget(type);\n            return <Wdgt {...forwardProps} view={view} />;\n        }\n        if (typeof type === 'function') {\n            const Type = type;\n            return <Type {...forwardProps} view={view} />;\n        }\n    }\n    let renderType = Array.isArray(schema.type)\n        ? schema.type.find(t => t !== 'null')\n        : schema.type;\n    if (renderType === undefined) {\n        renderType = 'undefinedType';\n    }\n    const Wdgt = defaultWidget(renderType);\n    return <Wdgt {...forwardProps} view={view || EMPTYOBJECT} />;\n}\n\nexport default Widget;\n","// @flow\nimport jsonschema, { Validator } from 'jsonschema';\n\nimport type { Schema } from '../types.js.flow';\n\ntype ValidationError = {\n    instance: mixed,\n    message: string,\n    property: string\n};\ntype ValidatorResult = {\n    errors: ValidationError[]\n};\nconst customValidator = new Validator();\ncustomValidator.attributes.errored = function validateErrored(\n    instance,\n    schema,\n    options\n) {\n    if (typeof schema.errored !== 'function') {\n        throw new jsonschema.SchemaError('\"errored\" expects a function');\n    }\n    const msg = schema.errored(instance, options.formValue);\n    if (msg) {\n        return msg;\n    }\n    return undefined;\n};\nfunction validate(\n    value: mixed,\n    schema: Schema,\n    formValue: mixed\n): ValidatorResult {\n    return customValidator.validate(value, schema, {\n        formValue\n    });\n}\n\nexport default validate;\n","const VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = 'state';\nconst ERRORS = 'errors';\nconst NOERRORS = [];\n\nexport function setErrors(tree, path, errors) {\n    const errorPath = [STATUS].concat(path).concat([ERRORS]);\n    const errorsCursor = tree.select(errorPath);\n    if (errors && errors.length && Array.isArray(errorsCursor.get())) {\n        errorsCursor.splice([0, errorsCursor.get().length]);\n        errorsCursor.concat(errors || []);\n    } else {\n        errorsCursor.set(errors || NOERRORS);\n    }\n}\n\n/**\n * Update a value in the tree\n *\n * @param {Baobab} tree the tree\n * @param {Array<string>} path path's value to update\n * @param value value to set\n * @param {Array<string>} errors errors relative to the value\n */\nexport function update(tree, path, value, errors) {\n    const statusPath = [STATUS].concat(path);\n    tree.set([VALUE].concat(path), value);\n    tree.set(statusPath.concat([STATE]), 'dirty');\n    setErrors(tree, path, errors);\n}\n\nexport function setDefaultValue(tree, path, value) {\n    tree.set([VALUE].concat(path), value);\n    tree.set([STATUS].concat(path).concat([STATE]), 'pristine');\n}\n\nexport function getStatus(tree, path) {\n    return tree.get([STATUS].concat(path).concat([STATE]));\n}\n\nexport function getErrors(tree, path) {\n    return tree.get([STATUS].concat(path).concat([ERRORS])) || NOERRORS;\n}\n\nexport function getFormValue(tree) {\n    return tree.get(VALUE);\n}\n/**\n * handle object's \"properties\" path and array's \"item\" path\n */\nfunction schemaPath(tree, path) {\n    return path.reduce((prev, val) => {\n        if (tree.get(prev).type === 'object') {\n            return prev.concat(['properties', val]);\n        } else if (tree.get(prev).type === 'array') {\n            return prev.concat(['items']);\n        }\n        return prev.concat([val]);\n    }, ['schema']);\n}\nexport function updateSchema(tree, path, value) {\n    const updatedPath = schemaPath(tree, path);\n    tree.set(updatedPath, value);\n}\n\nexport function deleteSchema(tree, path) {\n    const updatedPath = schemaPath(tree, path);\n    tree.unset(updatedPath);\n}\n","// @flow\nimport React from 'react';\nimport validate from './../../Utils/customValidator';\nimport { getFormValue, getErrors } from '../../Store/actions';\n\nimport type { Schema, Action } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema,\n    value?: mixed,\n    dispatch: (Action, ...args: mixed[]) => any,\n    path: string[],\n    onChange: mixed => void\n};\n\nfunction validated<P: Props>(\n    Comp: Class<React.Component<*, *, *>> | ((*) => ?React.Element<*>)\n) {\n    function Validator(props: P) {\n        function onChange(val: mixed): void {\n            const validation = validate(\n                val,\n                props.schema,\n                props.dispatch(getFormValue)\n            );\n            const err = validation.errors.map(error => error.message);\n            props.onChange(val, err);\n        }\n\n        return (\n            <Comp\n                {...props}\n                errorMessage={props.dispatch(getErrors, props.path)}\n                onChange={onChange}\n            />\n        );\n    }\n    return Validator;\n}\n\nexport default validated;\n","/* @flow */\nimport React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\nimport { updateSchema, deleteSchema } from '../../Store/actions';\n\nimport type { Schema, Action } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema & {\n        properties?: { [property: string]: Schema },\n        defaultProperties?: Schema\n    },\n    status: { [string | number]: {} },\n    editKey: string,\n    value: { [key: string]: mixed },\n    dispatch: (Action, ...args: mixed[]) => any,\n    path: Array<string>,\n    onChange: ({}) => void\n};\nconst EMPTY_OBJECT = {};\n\nfunction renderChildren(props: Props): [] {\n    const children = [];\n    const properties: { [key: string]: Schema } = props.schema.properties || {};\n    const value: { [key: string]: mixed } = props.value || {};\n    // Holds schema properties and value properties missing from schema.\n    const mergedProperties: Array<string> = Object.keys(properties);\n\n    Object.keys(value).forEach(v => {\n        if (v in properties) {\n            return;\n        }\n        mergedProperties.push(v);\n    });\n    function indexFor(property: string): number {\n        if (\n            properties[property] &&\n            typeof properties[property].index === 'number'\n        ) {\n            return properties[property].index;\n        }\n        return 0;\n    }\n    // Index based sorting\n    function sortProperties(a: string, b: string): number {\n        return indexFor(a) - indexFor(b);\n    }\n\n    mergedProperties.sort(sortProperties);\n    for (let i: number = 0; i < mergedProperties.length; i += 1) {\n        const prop: string = mergedProperties[i];\n        if (prop in properties) {\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={properties[prop]}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        } else {\n            const schema = props.schema.defaultProperties;\n            if (schema) {\n                props.dispatch(updateSchema, props.path.concat([prop]), schema);\n            }\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={schema}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        }\n    }\n    return children;\n}\n\nfunction ObjectField(props: Props) {\n    function addKey(key: string, value: mixed): void {\n        props.onChange(\n            Object.assign({}, props.value, {\n                [key]: value\n            })\n        );\n    }\n\n    function removeKey(key: string): void {\n        const value: {} = Object.assign({}, props.value);\n        delete value[key];\n        props.dispatch(deleteSchema, props.path.concat([key]), {});\n        props.onChange(value);\n    }\n\n    function alterKey(key: string, newKey: string): void {\n        const value: {} = {};\n        Object.keys(props.value).forEach(p => {\n            if (p !== key) {\n                value[p] = props.value[p];\n            } else {\n                value[newKey] = props.value[p];\n            }\n        });\n        props.onChange(value);\n    }\n    return (\n        <Widget\n            {...props}\n            addKey={addKey}\n            removeKey={removeKey}\n            alterKey={alterKey}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nObjectField.defaultProps = {\n    value: {}\n};\n\nexport default validator(ObjectField);\n","/* @flow */\nimport React from 'react';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nimport type { Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' },\n    value?: number | string,\n    editKey: string,\n    path: string[],\n    onChange: (value: string | number) => void\n};\n\nfunction StringField(props: Props) {\n    const val = props.value !== undefined && props.value !== null\n        ? String(props.value)\n        : props.value;\n    return <Widget {...props} value={val} />;\n}\n\nexport { StringField as SimpleStringField };\nexport default validator(StringField);\n","/* @flow */\nimport React from 'react';\nimport validator from '../Decorators/validator';\nimport { SimpleStringField } from './String';\nimport type { Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' },\n    value?: number,\n    editKey: string,\n    path: string[],\n    onChange: (string | void | number) => void,\n    errorMessage: string[]\n};\n\nclass NumberField\n    extends React.Component<void, Props, { value?: string | void | number }> {\n    state: {\n        value?: string | void | number\n    };\n    boundChange: (value: number | string) => void;\n    props: Props;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            value: props.value\n        };\n        this.boundChange = this.onChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        // if numerical values differ: update\n        if (Number(this.state.value) !== Number(nextProps.value)) {\n            this.setState({\n                value: nextProps.value\n            });\n        }\n    }\n    onChange(val) {\n        const value: string | void | number = val === '' ? undefined : val;\n        const numVal = Number(value);\n        this.setState(\n            {\n                value\n            },\n            () => this.props.onChange(isNaN(numVal) ? value : numVal)\n        );\n    }\n    render() {\n        return (\n            <SimpleStringField\n                {...this.props}\n                value={this.state.value}\n                onChange={this.boundChange}\n            />\n        );\n    }\n}\n\nexport default validator(NumberField);\n","// @flow\nimport React from 'react';\nimport Widget from '../Views/Widget';\nimport validator from './../Decorators/validator';\n\nimport type { Schema } from '../../types.js.flow';\n\nfunction BooleanField(\n    props: {\n        schema: Schema & { type: 'boolean' },\n        editKey: string,\n        path: string[],\n        value: boolean,\n        onChange: (value: boolean) => void\n    }\n) {\n    return <Widget {...props} />;\n}\n\nexport default validator(BooleanField);\n","// @flow\nimport React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nimport type { Schema } from '../../types.js.flow';\n\ntype Props = {\n    onChange: (mixed[]) => void,\n    schema: Schema & {\n        items?: Schema[],\n        value?: mixed\n    },\n    value?: mixed[],\n    editKey: string,\n    status: { [string | number]: {} },\n    path: string[]\n};\nconst EMPTY_OBJECT = {};\n\nfunction onChildChange(index: number, props: Props) {\n    return function onChange(val: mixed) {\n        const { value } = props;\n        if (value) {\n            props.onChange(\n                value.map((e, i) => {\n                    if (+i !== +index) {\n                        return e;\n                    }\n                    return val;\n                })\n            );\n        } else {\n            props.onChange([val]);\n        }\n    };\n}\n\nfunction onChildRemove(props: Props) {\n    return function onRemove(index: number) {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n    };\n}\n\nfunction onChildAdd(props: Props) {\n    return function onAdd() {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.concat([undefined]));\n    };\n}\n\nfunction renderChildren(props: Props) {\n    const { value, schema: { value: defaultValue, items } } = props;\n    let valueItems: mixed[];\n    if (value) {\n        valueItems = value;\n    } else if (defaultValue) {\n        valueItems = defaultValue;\n    } else {\n        valueItems = [];\n    }\n    const children = [];\n    valueItems.forEach((val, i) =>\n        children.push(\n            <SchemaType\n                {...props}\n                schema={Array.isArray(items) ? items[i] || {} : items}\n                value={val}\n                editKey={String(i)}\n                status={props.status[String(i)] || EMPTY_OBJECT}\n                key={i}\n                onChange={onChildChange(i, props)}\n            />\n        )\n    );\n    return children;\n}\n\nfunction ArrayField(props: Props) {\n    return (\n        <Widget\n            {...props}\n            onChildAdd={onChildAdd(props)}\n            onChildRemove={onChildRemove(props)}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default validator(ArrayField);\n","// @flow\nimport ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n    object: ObjectField,\n    string: StringField,\n    number: NumberField,\n    boolean: BooleanField,\n    array: ArrayField\n};\n","// @flow\nimport React from 'react';\nimport { getFormValue } from '../../Store/actions';\nimport type { Action, Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema,\n    value: mixed,\n    editKey?: string,\n    path: string[],\n    dispatch: (Action, ...args: mixed[]) => any\n};\nfunction visibility<P: Props>(\n    Comp: Class<React.Component<*, P, *>>\n): (props: P) => ?React.Element<P> {\n    return function Visible(props: P) {\n        const { schema: { visible }, value } = props;\n        if (visible && !visible(value, props.dispatch(getFormValue))) {\n            return null;\n        }\n        return <Comp {...props} />;\n    };\n}\n\nexport default visibility;\n","/* @flow */\nimport React from 'react';\n\nimport type { Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema,\n    path: string[]\n};\n\nfunction Undefined(props: Props) {\n    return (\n        <span>{`Undefined field type \"${props.schema.type.toString()}\", [${props.path.toString()}]`}</span>\n    );\n}\n\nexport default Undefined;\n","// @flow\nexport default function infer(value: mixed) {\n    switch (typeof value) {\n        case 'number':\n            return 'number';\n        case 'string':\n            return 'string';\n        case 'boolean':\n            return 'boolean';\n        case 'object':\n            return Array.isArray(value) ? 'array' : 'object';\n        default:\n            return 'string';\n    }\n}\n","// @flow\nimport React from 'react';\nimport infer from './../../Utils/infer';\nimport type { Schema } from '../../types.js.flow';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath: string[], editKey?: string): string[] {\n    if (editKey) {\n        return currentPath.concat([editKey]);\n    }\n    return currentPath;\n}\ntype Props = {\n    path: string[],\n    editKey?: string,\n    value?: mixed,\n    schema: Schema\n};\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param {React.Component} Comp component to decorate.\n * @return {React.Component} the decorated component.\n */\nfunction inference<P: Props>(\n    Comp: Class<React.Component<*, P, *>> | ((props: P) => ?React.Element<*>)\n): * {\n    class Infer extends React.Component<void, P, { schema: Schema }> {\n        state: {\n            schema: Schema\n        };\n        constructor(props: P) {\n            super(props);\n            const { schema } = props;\n            let inferedSchema = schema;\n            if (!inferedSchema || !('type' in inferedSchema)) {\n                inferedSchema = { type: infer(props.value) };\n            }\n            this.state = { schema: inferedSchema };\n        }\n        componentWillReceiveProps(nextProps: P) {\n            if (this.props.schema !== nextProps.schema) {\n                let inferedSchema = nextProps.schema;\n                if (!inferedSchema || !('type' in inferedSchema)) {\n                    inferedSchema = { type: infer(nextProps.value) };\n                }\n                this.setState(() => ({ schema: inferedSchema }));\n            }\n        }\n        render() {\n            const path = updatePath(this.props.path, this.props.editKey);\n            return (\n                <Comp {...this.props} path={path} schema={this.state.schema} />\n            );\n        }\n    }\n    return Infer;\n}\n\nexport default inference;\n","// @flow\nimport React from 'react';\nimport { setDefaultValue } from '../../Store/actions';\nimport type { Action, Schema } from '../../types.js.flow';\n\nfunction updateDefault({ value, schema: { value: defaultValue } }) {\n    const val = value !== undefined ? value : defaultValue;\n    return val;\n}\ntype Props = {\n    editKey?: string,\n    path: string[],\n    value?: mixed,\n    schema: Schema,\n    dispatch: (Action, ...args: mixed[]) => any\n};\n\nfunction fromDefaultValue<P: Props>(\n    Comp: Class<React.Component<*, P, *>> | ((props: P) => ?React.Element<P>)\n) {\n    class DefaultValue extends React.Component<void, *, *> {\n        state: {\n            val?: mixed\n        };\n        props: P;\n        constructor(props: P) {\n            super(props);\n            this.state = { val: updateDefault(props) };\n        }\n        componentDidMount() {\n            this.notifyDefaultChange();\n        }\n        componentWillReceiveProps(nextProps: P) {\n            if (nextProps.schema !== this.props.schema) {\n                this.setState({ val: updateDefault(nextProps) });\n            } else {\n                this.setState({ val: nextProps.value });\n            }\n        }\n        componentDidUpdate() {\n            this.notifyDefaultChange();\n        }\n        notifyDefaultChange() {\n            if (this.props.value !== this.state.val) {\n                setTimeout(\n                    () =>\n                        this.props.dispatch(\n                            setDefaultValue,\n                            this.props.path,\n                            this.state.val\n                        ),\n                    10\n                );\n            }\n        }\n        render() {\n            return <Comp {...this.props} value={this.state.val} />;\n        }\n    }\n\n    return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","/* @flow */\nimport React from 'react';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\nimport fromDefaultValue from './Decorators/fromDefaultValue';\nimport { update } from '../Store/actions';\n\nimport type { Schema, Action } from '../types.js.flow';\n\ntype SchemaProps = {\n    schema: Schema,\n    status: { [string | number]: {} },\n    path: string[],\n    dispatch: (Action, ...args: mixed[]) => any,\n    editKey?: string,\n    value: ?mixed\n};\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType extends React.Component<*, SchemaProps, *> {\n    onChange: mixed => void;\n    constructor(props: SchemaProps) {\n        super(props);\n        this.onChange = function onChange(...args) {\n            props.dispatch(update, props.path, ...args);\n        };\n    }\n    shouldComponentUpdate(props: SchemaProps) {\n        const { editKey, schema, value, status } = this.props;\n        return !(editKey === props.editKey &&\n            schema === props.schema &&\n            value === props.value &&\n            status === props.status);\n    }\n    render() {\n        const { schema: { type } } = this.props;\n        const renderType = Array.isArray(type)\n            ? type.find(t => t !== 'null')\n            : type;\n        let Type;\n        if (renderType == null || renderType === 'null') {\n            Type = UndefinedField;\n        } else {\n            Type = Fields[renderType];\n        }\n        return <Type {...this.props} onChange={this.onChange} />;\n    }\n}\nSchemaType.defaultProps = {\n    path: []\n};\n\nexport default inference(fromDefaultValue(visible(SchemaType)));\n","// @flow\nimport React from 'react';\nimport { root, branch } from 'baobab-react/higher-order';\nimport createTree from '../Store/index';\nimport SchemaType from './SchemaType';\nimport { setErrors } from '../Store/actions';\nimport validate from './../Utils/customValidator';\nimport { setDefaultWidgets } from './Views/index';\n\nimport type { Schema } from '../types.js.flow';\n\nconst BranchedSchemaType = branch(\n    {\n        schema: 'schema',\n        status: 'status',\n        value: 'value'\n    },\n    SchemaType\n);\n\ntype Props = {\n    onChange: mixed => any,\n    schema?: Schema,\n    value?: mixed\n};\n\n/**\n * Top Component\n */\nclass Container extends React.Component<void, Props, void> {\n    static setDefaultWidgets: *;\n    tree: any;\n    rooted: Class<\n        React.Component<\n            void,\n            {\n                onChange: mixed => void,\n                path: string[]\n            },\n            void\n        >\n    >;\n    props: Props;\n\n    constructor(props: Props) {\n        super(props);\n        this.tree = createTree();\n        this.updateTree(props.value, props.schema);\n        this.rooted = root(this.tree, BranchedSchemaType);\n    }\n    componentDidMount() {\n        this.tree\n            .select('value')\n            .on('update', event =>\n                this.props.onChange(\n                    event.data.currentData,\n                    validate(\n                        event.data.currentData,\n                        this.tree.get('schema'),\n                        event.data.currentData\n                    ).errors\n                )\n            );\n    }\n    componentWillReceiveProps(nextProps: Props) {\n        if (\n            nextProps.value === this.tree.get('value') &&\n            nextProps.schema === this.props.schema\n        ) {\n            return;\n        }\n        this.updateTree(nextProps.value, nextProps.schema);\n    }\n    componentWillUnmount() {\n        this.tree.release();\n    }\n    getValue() {\n        return this.tree.get('value');\n    }\n    updateTree(value: mixed, schema?: Schema) {\n        this.tree.select('value').set(value);\n        this.tree.select('schema').set(schema);\n        this.tree.select('status').set({});\n    }\n    validate() {\n        const validationResult = validate(\n            this.tree.get('value'),\n            this.tree.get('schema'),\n            this.tree.get('value')\n        );\n        const errorMap = new Map();\n        // Collect each error associated with a given path\n        validationResult.errors.forEach(error => {\n            const errors = errorMap.get(error.property) || [];\n            errors.push(error.message); // Add new error\n            errorMap.set(error.property, errors);\n        });\n        errorMap.forEach((value, key) => {\n            setErrors(\n                this.tree,\n                key.split(/\\.|\\[|\\]/).filter(x => x !== '').slice(1),\n                value\n            );\n        });\n        return validationResult.errors;\n    }\n    render() {\n        const Rooted = this.rooted;\n        return <Rooted onChange={this.props.onChange} path={[]} />;\n    }\n}\n\nContainer.setDefaultWidgets = setDefaultWidgets;\nexport default Container;\n"],"names":["schema","value","status","type","props","required","React","className","requiredClassName","view","title","editKey","a","description","errorMessage","defaultProps","Label","target","func","event","checked","placeholder","onChange","onInputChange","Input","TextWidget","ArrowNumberWidget","CheckboxWidget","Children","map","children","onClick","onChildRemove","index","child","onChildAdd","ArrayWidget","ObjectWidget","choices","key","c","label","e","string","number","boolean","array","object","arrowNumber","select","SelectWidget","undefinedWidgetFactory","DefaultWidget","Object","assign","obj","path","addKey","removeKey","alterKey","defaultWidget","s","forwardProps","Array","isArray","find","renderType","r","EMPTYOBJECT","customValidator","attributes","errored","SchemaError","instance","options","formValue","msg","validate","STATUS","STATE","ERRORS","NOERRORS","concat","tree","errorPath","errors","length","errorsCursor","get","splice","set","VALUE","statusPath","setErrors","reduce","prev","val","schemaPath","updatedPath","unset","dispatch","getErrors","getFormValue","validation","message","err","property","properties","keys","forEach","v","mergedProperties","push","sort","indexFor","b","i","prop","SchemaType","EMPTY_OBJECT","defaultProperties","updateSchema","Widget","deleteSchema","p","newKey","renderChildren","ObjectField","StringField","state","d","boundChange","bind","componentWillReceiveProps","nextProps","setState","isNaN","numVal","render","SimpleStringField","Component","NumberField","BooleanField","oldValue","filter","items","defaultValue","onChildChange","ArrayField","visible","toString","currentPath","infer","f","inferedSchema","updatePath","updateDefault","componentDidMount","notifyDefaultChange","componentDidUpdate","setTimeout","setDefaultValue","args","update","shouldComponentUpdate","UndefinedField","Fields","fromDefaultValue","branch","Container","createTree","updateTree","rooted","root","BranchedSchemaType","on","data","currentData","componentWillUnmount","release","getValue","errorMap","error","split","slice","validationResult","setDefaultWidgets"],"mappings":"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"}