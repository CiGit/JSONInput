{"version":3,"file":"index.es2015.js","sources":["../src/Store/index.ts","../src/Comps/Views/undefinedWidgetFactory.tsx","../src/Comps/Decorators/labeled.js","../src/Comps/Views/Input.js","../src/Comps/Views/TextWidget.js","../src/Comps/Views/ArrowNumberWidget.js","../src/Comps/Views/CheckboxWidget.js","../src/Comps/Views/ArrayWidget.js","../src/Comps/Views/SelectWidget.js","../src/Comps/Views/index.ts","../src/Comps/Views/Widget.tsx","../src/Utils/customValidator.ts","../src/Store/actions.ts","../src/Comps/Decorators/validator.tsx","../src/Comps/Fields/Object.tsx","../src/Comps/Fields/String.tsx","../src/Comps/Fields/Number.tsx","../src/Comps/Fields/Boolean.tsx","../src/Comps/Fields/Array.tsx","../src/Comps/Fields/index.tsx","../src/Comps/Decorators/visible.tsx","../src/Comps/Fields/Undefined.tsx","../src/Utils/infer.ts","../src/Comps/Decorators/inference.tsx","../src/Comps/Decorators/fromDefaultValue.tsx","../src/Comps/SchemaType.tsx","../src/Comps/Container.tsx"],"sourcesContent":["import Baobab from 'baobab';\n\nconst createTree = () => new Baobab({\n    schema: {},\n    value: {},\n    status: {}\n});\n\nexport default createTree;\n","import * as React from 'react';\n\nfunction undefinedWidgetFactory(\n    type: string\n) {\n    return function UndefinedWidget() {\n        return (\n            <span>\n                {`Widget for '${type}' was not defined`}\n            </span>\n        );\n    };\n}\n\nexport default undefinedWidgetFactory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction labeled(Comp) {\n    function Label(props) {\n        const required = props.schema.required;\n        const requiredClassName = required ? 'required' : '';\n        return (\n            <div>\n                <label //eslint-disable-line\n                    className={`${props.schema.type}Field ${requiredClassName}`}\n                >\n                    <span className=\"title\">\n                        {props.view.title || props.editKey}\n                    </span>\n                    <Comp {...props} />\n                    <span>{props.view.description}</span>\n                    <span>{props.errorMessage}</span>\n                </label>\n            </div>\n        );\n    }\n\n    Label.propTypes = {\n        schema: PropTypes.shape({\n            type: PropTypes.oneOfType([\n                PropTypes.oneOf([\n                    'object',\n                    'string',\n                    'number',\n                    'array',\n                    'boolean'\n                ]),\n                PropTypes.arrayOf(\n                    PropTypes.oneOf([\n                        'object',\n                        'string',\n                        'number',\n                        'array',\n                        'boolean',\n                        'null'\n                    ])\n                )\n            ]).isRequired,\n            required: PropTypes.bool,\n            description: PropTypes.string\n        }).isRequired,\n        editKey: PropTypes.string,\n        view: PropTypes.shape({\n            title: PropTypes.string,\n            description: PropTypes.string\n        }).isRequired,\n        errorMessage: PropTypes.arrayOf(PropTypes.string)\n    };\n    Label.defaultProps = {\n        editKey: '',\n        errorMessage: []\n    };\n    return Label;\n}\n\nexport default labeled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction onInputChange(func) {\n    return function onChange(event) {\n        if (event.target.type === 'checkbox') {\n            func(event.target.checked);\n        } else {\n            func(event.target.value);\n        }\n    };\n}\n\nfunction Input(props) {\n    return (\n        <input\n            type={props.type}\n            placeholder={props.schema.placeholder}\n            value={props.value || ''}\n            className={props.className}\n            onChange={onInputChange(props.onChange)}\n            checked={props.checked}\n        />\n    );\n}\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool,\n    value: PropTypes.any, // eslint-disable-line\n    schema: PropTypes.shape({\n        placeholder: PropTypes.string\n    }).isRequired\n};\nInput.defaultProps = {\n    className: undefined,\n    checked: false\n};\nexport default Input;\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction TextWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"string\"\n        />\n    );\n}\n\nexport default labeled(TextWidget);\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction ArrowNumberWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n        />\n    );\n}\n\nexport default labeled(ArrowNumberWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction CheckboxWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"checkbox\"\n            checked={props.value}\n        />\n    );\n}\n\nCheckboxWidget.propTypes = {\n    value: PropTypes.bool\n};\nCheckboxWidget.defaultProps = { value: false };\n\nexport default labeled(CheckboxWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ArrayWidget(props) {\n    function renderChild(child, index) {\n        return (\n            <div>\n                <button\n                    onClick={function remove() {\n                        props.onChildRemove(index);\n                    }}\n                >\n                    -\n                </button>\n                {child}\n            </div>\n        );\n    }\n\n    const children = React.Children.map(props.children, renderChild);\n    return (\n        <div>\n            <div>\n                {children}\n            </div>\n            <button onClick={() => props.onChildAdd()}>+</button>\n        </div>\n    );\n}\n\nArrayWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired,\n    onChildRemove: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n    onChildAdd: PropTypes.func.isRequired\n};\nexport default labeled(ArrayWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectWidget(props) {\n    const { view, value, onChange } = props;\n    const choices = view.choices.map(c => (\n        <option key={c.value} value={c.value}>\n            {c.label}\n        </option>\n    ));\n    return (\n        <select value={value} onChange={e => onChange(e.target.value)}>\n            {choices}\n        </select>\n    );\n}\nSelectWidget.propTypes = {\n    view: PropTypes.shape({\n        choices: PropTypes.arrayOf(\n            PropTypes.shape({\n                value: PropTypes.any,\n                label: PropTypes.string.isRequired\n            })\n        ).isRequired\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line\n    onChange: PropTypes.func.isRequired\n};\nexport default SelectWidget;\n","import * as React from 'react';\nimport undefinedWidgetFactory from './undefinedWidgetFactory';\nimport TextWidget from './TextWidget';\nimport ArrowNumberWidget from './ArrowNumberWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport ArrayWidget from './ArrayWidget';\nimport ObjectWidget from './ObjectWidget';\nimport SelectWidget from './SelectWidget';\n\nimport { WidgetProps } from '../../../typings/types';\n\nexport type WidgetMap = {\n    [key: string]: React.ComponentClass<WidgetProps> | React.SFC<WidgetProps>\n};\nlet DefaultWidget: WidgetMap = {\n    string: TextWidget,\n    number: TextWidget,\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: ObjectWidget,\n    arrowNumber: ArrowNumberWidget,\n    select: SelectWidget\n};\n\nfunction defaultWidget(type: string) {\n    return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj: WidgetMap) {\n    DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets, undefinedWidgetFactory };\n","import * as React from 'react';\nimport { defaultWidget } from './index';\n\nimport { WidgetProps, TYPESTRING, Schema } from '../../../typings/types';\n\ntype Props = {\n    value?: {};\n    schema: Schema & { type: TYPESTRING };\n    editKey: string;\n    onChange: (value?: {}) => void;\n    errorMessage?: string[];\n    path: string[];\n    children?: (React.ComponentClass<WidgetProps> | React.SFC<WidgetProps>)[];\n    addKey?: (key: string, value: {}) => void;\n    removeKey?: (key: string) => void;\n    alterKey?: (key: string, newKey: string) => void;\n    onChildAdd?: () => void;\n    onChildRemove?: (index: number) => void;\n};\n\nconst EMPTYOBJECT = {};\nfunction Widget<P extends Props>(props: P) {\n    const {\n        value,\n        schema,\n        schema: { view },\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage,\n    } = props;\n    const forwardProps = {\n        value,\n        schema,\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage,\n    };\n    if (view) {\n        const { type } = view;\n        if (typeof type === 'string') {\n            const Wdgt = defaultWidget(type);\n            return <Wdgt {...forwardProps} view={view} />;\n        }\n        if (typeof type === 'function') {\n            const Type = type;\n            return <Type {...forwardProps} view={view} />;\n        }\n    }\n    let renderType = Array.isArray(schema.type)\n        ? (schema.type as TYPESTRING[]).find(t => t !== 'null')\n        : schema.type;\n    let Wdgt;\n    if (renderType === undefined) {\n        Wdgt = defaultWidget('undefinedType');\n    } else {\n        Wdgt = defaultWidget(renderType);\n    }\n    return <Wdgt {...forwardProps} view={view || EMPTYOBJECT} />;\n}\n\nexport default Widget;\n","import * as jsonschema from 'jsonschema';\nimport { ValidatorResult } from \"jsonschema/lib\";\nimport { Schema, ErrorFn } from '../../typings/types';\n\nconst customValidator = new jsonschema.Validator();\ncustomValidator.attributes.errored = function validateErrored(\n    instance: {},\n    schema: { errored?: ErrorFn },\n    options: { formValue: {} }\n) {\n    if (typeof schema.errored !== 'function') {\n        throw new jsonschema.SchemaError('\"errored\" expects a function');\n    }\n    const msg = schema.errored(instance, options.formValue);\n    if (msg) {\n        return msg;\n    }\n    return undefined;\n};\nfunction validate(\n    value: {},\n    schema: Schema,\n    formValue: {}\n): ValidatorResult {\n    return customValidator.validate(value, schema, { formValue });\n}\n\nexport default validate;\n","/*\nEvery tree should be of type Baobab\n*/\nconst VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = 'state';\nconst ERRORS = 'errors';\nconst NO_ERRORS: string[] = [];\n\nexport function setErrors(tree: any, path: string[] = [], errors: string[]) {\n    const errorPath = [STATUS].concat(path).concat([ERRORS]);\n    const errorsCursor = tree.select(errorPath);\n    if (errors && errors.length && Array.isArray(errorsCursor.get())) {\n        errorsCursor.splice([0, errorsCursor.get().length]);\n        errorsCursor.concat(errors || []);\n    } else {\n        errorsCursor.set(errors || NO_ERRORS);\n    }\n}\n\n/**\n * Update a value in the tree\n *\n * @param {Baobab} tree the tree\n * @param {Array<string>} path path's value to update\n * @param value value to set\n * @param {Array<string>} errors errors relative to the value\n */\nexport function update(\n    tree: any,\n    path: string[] = [],\n    value: {},\n    errors: string[]\n) {\n    const statusPath = [STATUS].concat(path);\n    tree.set([VALUE].concat(path), value);\n    tree.set(statusPath.concat([STATE]), 'dirty');\n    setErrors(tree, path, errors);\n}\n\nexport function setDefaultValue(tree: any, path: string[] = [], value: {}) {\n    tree.set([VALUE].concat(path), value);\n    tree.set([STATUS].concat(path).concat([STATE]), 'pristine');\n}\n\nexport function getStatus(tree: any, path: string[] = []) {\n    const statePath = [STATUS].concat(path).concat([STATE]);\n    if (tree.exists(statePath)) {\n        return tree.get([STATUS].concat(path).concat([STATE]));\n    }\n    return undefined;\n}\n\nexport function getErrors(tree: any, path: string[] = []) {\n    return tree.get([STATUS].concat(path).concat([ERRORS])) || NO_ERRORS;\n}\n\nexport function getFormValue(tree: any) {\n    return tree.get(VALUE);\n}\n/**\n * handle object's \"properties\" path and array's \"item\" path\n */\nfunction schemaPath(tree: any, path: string[] = []) {\n    return path.reduce(\n        (prev, val) => {\n            if (tree.get(prev).type === 'object') {\n                return prev.concat(['properties', val]);\n            } else if (tree.get(prev).type === 'array') {\n                return prev.concat(['items']);\n            }\n            return prev.concat([val]);\n        },\n        ['schema']\n    );\n}\nexport function updateSchema(tree: any, path: string[] = [], value: string[]) {\n    const updatedPath = schemaPath(tree, path);\n    tree.set(updatedPath, value);\n}\n\nexport function deleteSchema(tree: any, path: string[] = []) {\n    const updatedPath = schemaPath(tree, path);\n    tree.unset(updatedPath);\n}\n","import * as React from 'react';\nimport validate from './../../Utils/customValidator';\nimport { getFormValue, getErrors } from '../../Store/actions';\n\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema;\n    value?: {};\n    dispatch: (action: Action, ...args: {}[]) => any;\n    path: string[];\n    onChange: (value: {}, errors?: string[]) => void;\n};\n\nfunction validated<P extends Props>(\n    Comp: React.ComponentClass<any> | React.SFC<any>\n) {\n    function Validator(props: P) {\n        function onChange(val: {}): void {\n            const validation = validate(\n                val,\n                props.schema,\n                props.dispatch(getFormValue)\n            );\n            const err = validation.errors.map(error => error.message);\n            props.onChange(val, err);\n        }\n        // console.log(getErrors);\n        return (\n            <Comp\n                {...props}\n                errorMessage={props.dispatch(getErrors, props.path)}\n                onChange={onChange}\n            />\n        );\n    }\n    return Validator;\n}\n\nexport default validated;\n","import * as React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\nimport { updateSchema, deleteSchema } from '../../Store/actions';\n\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema.Object;\n    status: { [key: string]: {} };\n    editKey: string;\n    value: {\n        [key: string]: {};\n    };\n    dispatch: (action: Action, ...args: {}[]) => any;\n    path: string[];\n    onChange: (value: {}) => void;\n};\n\nconst EMPTY_OBJECT = {};\n\nfunction renderChildren(props: Props): JSX.Element[] {\n    const children = [];\n    const properties = props.schema.properties || {};\n    const value: { [key: string]: {} } = props.value || {};\n    // Holds schema properties and value properties missing from schema.\n    const mergedProperties: Array<string> = Object.keys(properties);\n\n    Object.keys(value).forEach(v => {\n        if (v in properties) {\n            return;\n        }\n        mergedProperties.push(v);\n    });\n    function indexFor(property: string): number {\n        if (properties[property]) {\n            const index = properties[property].index;\n            if (typeof index === 'number') {\n                return index;\n            }\n        }\n        return 0;\n    }\n    // Index based sorting\n    function sortProperties(a: string, b: string): number {\n        return indexFor(a) - indexFor(b);\n    }\n\n    mergedProperties.sort(sortProperties);\n    for (let i: number = 0; i < mergedProperties.length; i += 1) {\n        const prop: string = mergedProperties[i];\n        if (prop in properties) {\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={properties[prop]}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        } else {\n            const schema = props.schema.additionalProperties;\n            if (schema) {\n                props.dispatch(updateSchema, props.path.concat([prop]), schema);\n            }\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={schema}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        }\n    }\n    return children;\n}\n\nfunction ObjectField(props: Props) {\n    function addKey(key: string, value: {}): void {\n        props.onChange(\n            Object.assign({}, props.value, {\n                [key]: value,\n            })\n        );\n    }\n\n    function removeKey(key: string): void {\n        const value: { [key: string]: {} } = Object.assign({}, props.value);\n        delete value[key];\n        if (!(props.schema.properties && key in props.schema.properties)) {\n            props.dispatch(deleteSchema, props.path.concat([key]), {});\n        }\n        props.onChange(value);\n    }\n\n    function alterKey(key: string, newKey: string): void {\n        const value: { [key: string]: {} } = {};\n        Object.keys(props.value).forEach(p => {\n            if (p !== key) {\n                value[p] = props.value[p];\n            } else {\n                value[newKey] = props.value[p];\n            }\n        });\n        props.onChange(value);\n    }\n    return (\n        <Widget\n            {...props as any}\n            addKey={addKey}\n            removeKey={removeKey}\n            alterKey={alterKey}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default validator(ObjectField);\n","import * as React from 'react';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' };\n    value?: number | string;\n    editKey: string;\n    path: string[];\n    onChange: (value: string | number) => void;\n    dispatch: (action: Action, ...args: {}[]) => any;\n};\n\nfunction StringField(props: Props) {\n    const val =\n        props.value !== undefined && props.value !== null\n            ? String(props.value)\n            : props.value;\n    return <Widget {...props} value={val} />;\n}\n\nexport { StringField as SimpleStringField };\nexport default validator(StringField);\n","import * as React from 'react';\nimport validator from '../Decorators/validator';\nimport { SimpleStringField } from './String';\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' };\n    value?: number;\n    editKey: string;\n    path: string[];\n    dispatch: (action: Action, ...args: {}[]) => any;\n    onChange: (value: string | void | number) => void;\n};\n\nclass NumberField extends React.Component<Props, { value?: string | number }> {\n    boundChange: (value: number | string) => void;\n    props: Props;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            value: props.value,\n        };\n        this.boundChange = this.onChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps: Props) {\n        // if numerical values differ: update\n        if (Number(this.state.value) !== Number(nextProps.value)) {\n            this.setState({\n                value: nextProps.value,\n            });\n        }\n    }\n    onChange(val?: string | number) {\n        const value: string | number | undefined = val === '' ? undefined : val;\n        const numVal = Number(value);\n        this.setState(\n            {\n                value,\n            },\n            () => this.props.onChange(isNaN(numVal) ? value : numVal)\n        );\n    }\n    render() {\n        return (\n            <SimpleStringField\n                {...this.props}\n                value={this.state.value}\n                onChange={this.boundChange}\n            />\n        );\n    }\n}\n\nexport default validator(NumberField);\n","import * as React from 'react';\nimport Widget from '../Views/Widget';\nimport validator from './../Decorators/validator';\n\nimport{ Schema, Action } from '../../../typings/types';\n\nfunction BooleanField(\n    props: {\n        schema: Schema & { type: 'boolean' },\n        editKey: string,\n        path: string[],\n        value: boolean,\n        onChange: (value: boolean) => void,\n        dispatch: (action: Action, ...args: {}[]) => any,\n    }\n) {\n    return <Widget {...(props)} />;\n}\n\nexport default validator(BooleanField);\n","import * as React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    onChange: (val: {}[]) => void;\n    schema: Schema & {\n        type: 'array';\n        items?: Schema[] | Schema;\n        value?: {}[];\n    };\n    dispatch: (action: Action, ...args: {}[]) => any;\n    value?: {}[];\n    editKey: string;\n    status: { [key: string]: {} };\n    path: string[];\n    [key: string]: any;\n};\nconst EMPTY_OBJECT = {};\n\nfunction onChildChange(index: number, props: Props) {\n    return function onChange(val: {}) {\n        const { value } = props;\n        if (value) {\n            props.onChange(\n                value.map((e, i) => {\n                    if (+i !== +index) {\n                        return e;\n                    }\n                    return val;\n                })\n            );\n        } else {\n            props.onChange([val]);\n        }\n    };\n}\n\nfunction onChildRemove(props: Props) {\n    return function onRemove(index: number) {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n    };\n}\n\nfunction onChildAdd(props: Props) {\n    return function onAdd(value?: {}) {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.concat([value]));\n    };\n}\n\nfunction renderChildren(props: Props) {\n    const { value, schema: { value: defaultValue, items } } = props;\n    let valueItems: {}[];\n    if (value) {\n        valueItems = value;\n    } else if (defaultValue) {\n        valueItems = defaultValue as {}[];\n    } else {\n        valueItems = [];\n    }\n    const children: JSX.Element[] = [];\n    valueItems.forEach((val, i) =>\n        children.push(\n            <SchemaType\n                {...props}\n                schema={Array.isArray(items) ? items[i] || {} : items}\n                value={val}\n                editKey={String(i)}\n                status={props.status[String(i)] || EMPTY_OBJECT}\n                key={i}\n                onChange={onChildChange(i, props)}\n            />\n        )\n    );\n    return children;\n}\n\nfunction ArrayField(props: Props) {\n    return (\n        <Widget\n            {...props as any}\n            onChildAdd={onChildAdd(props)}\n            onChildRemove={onChildRemove(props)}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default validator(ArrayField);\n","import ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n    object: ObjectField,\n    string: StringField,\n    number: NumberField,\n    boolean: BooleanField,\n    array: ArrayField\n};\n","import * as React from 'react';\nimport { getFormValue } from '../../Store/actions';\nimport { Action, Schema } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema;\n    path: string[];\n    value?: {};\n    dispatch: (action: Action, ...args: {}[]) => any;\n};\nfunction visibility<P extends Props>(\n    Comp: React.ComponentClass<P> | React.SFC<P>\n): React.SFC<P> {\n    return function Visible(props: P) {\n        const { schema: { visible }, value } = props;\n        try {\n            if (\n                visible &&\n                !visible(value, props.dispatch(getFormValue), props.path)\n            ) {\n                return null!;\n            }\n        } catch (e) {\n            return null!;\n        }\n        return <Comp {...props} />;\n    };\n}\n\nexport default visibility;\n","import * as React from 'react';\n\nimport { WidgetProps } from '../../../typings/types';\n\nfunction Undefined(props: WidgetProps) {\n    return (\n        <span>{`Undefined field type \"${props.schema.type.toString()}\", [${props.path.toString()}]`}</span>\n    );\n}\n\nexport default Undefined;\n","export default function infer(value?: {}) {\n    switch (typeof value) {\n        case 'number':\n            return 'number';\n        case 'string':\n            return 'string';\n        case 'boolean':\n            return 'boolean';\n        case 'object':\n            return Array.isArray(value) ? 'array' : 'object';\n        default:\n            return 'string';\n    }\n}\n","import * as React from 'react';\nimport infer from './../../Utils/infer';\nimport { Schema } from '../../../typings/types';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath: string[], editKey?: string): string[] {\n    if (editKey) {\n        return currentPath.concat([editKey]);\n    }\n    return currentPath;\n}\ntype Props = {\n    path: string[],\n    editKey?: string,\n    value?: {},\n    schema?: Schema\n};\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param {React.Component} Comp component to decorate.\n * @return {React.Component} the decorated component.\n */\nfunction inference<P extends Props>(\n    Comp: React.ComponentClass<P> | React.SFC<P>\n) {\n    class Infer extends React.Component<Partial<P> & Props, { schema: Schema }> {\n        path: string[];\n        state: {\n            schema: Schema\n        };\n        constructor(props: P) {\n            super(props);\n            const { schema } = props;\n            let inferredSchema = schema || {};\n            if (!('type' in inferredSchema)) {\n                inferredSchema = { type: infer(props.value), ...inferredSchema };\n            }\n            this.state = { schema: inferredSchema };\n            this.path = updatePath(this.props.path, this.props.editKey);\n        }\n        componentWillReceiveProps(nextProps: P) {\n            if (this.props.schema !== nextProps.schema) {\n                let inferredSchema = nextProps.schema || {};\n                if (!('type' in inferredSchema)) {\n                    inferredSchema = { type: infer(nextProps.value), ...inferredSchema };\n                }\n                this.setState(() => ({ schema: inferredSchema }));\n            }\n        }\n        render() {\n            return (\n                <Comp {...(this.props) } path={this.path} schema={this.state.schema} />\n            );\n        }\n    }\n    return Infer;\n}\n\nexport default inference;\n","import * as React from 'react';\nimport { setDefaultValue } from '../../Store/actions';\nimport { Action, Schema } from '../../../typings/types';\n\nexport type Props = {\n    editKey?: string;\n    path: string[];\n    status: {\n        state?: string;\n    };\n    value?: {};\n    schema: Schema;\n    dispatch: (action: Action, ...args: ({} | void)[]) => any;\n};\nfunction updateDefault({ value, schema: { value: defaultValue } }: Props) {\n    const val = value !== undefined ? value : defaultValue;\n    return val;\n}\n\nfunction fromDefaultValue<P extends Props>(\n    Comp: React.ComponentClass<P> | React.SFC<P>\n) {\n    class DefaultValue extends React.Component<P, { val?: {} }> {\n        constructor(props: P) {\n            super(props);\n            this.state = { val: updateDefault(props) };\n            this.notifyDefaultChange();\n        }\n        componentDidMount() {}\n        componentWillReceiveProps(nextProps: P) {\n            if (nextProps.status.state === undefined) {\n                this.setState({ val: updateDefault(nextProps) });\n            } else {\n                this.setState({ val: nextProps.value });\n            }\n        }\n        componentDidUpdate() {\n            this.notifyDefaultChange();\n        }\n        notifyDefaultChange() {\n            if (this.props.value !== this.state.val) {\n                this.props.dispatch(\n                    setDefaultValue,\n                    this.props.path,\n                    this.state.val\n                );\n            }\n        }\n        render() {\n            return <Comp {...this.props} value={this.state.val} />;\n        }\n    }\n\n    return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","import * as React from 'react';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\nimport fromDefaultValue from './Decorators/fromDefaultValue';\nimport { update } from '../Store/actions';\n\nimport { Schema, Action, TYPESTRING } from '../../typings/types';\n\ntype SchemaProps = {\n    schema: Schema,\n    status: { [key: string]: {} },\n    x?:string,\n    path: string[],\n    dispatch: (action: Action, ...args: {}[]) => any,\n    editKey?: string,\n    value?: {}\n};\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType<P extends SchemaProps> extends React.Component<P> {\n    static defaultProps = {\n        path: []\n    };\n    onChange: ({ }) => void;\n    constructor(props: P) {\n        super(props);\n        this.onChange = function onChange(...args: {}[]) {\n            props.dispatch(update, props.path, ...args);\n        };\n    }\n    render() {\n        const { schema: { type } } = this.props;\n        const renderType = Array.isArray(type)\n            ? (type as TYPESTRING[]).find(t => t !== 'null')\n            : type;\n        let Type: React.ComponentClass<any> | React.SFC<any>;\n        if (renderType === undefined || renderType === 'null') {\n            Type = UndefinedField;\n        } else {\n            Type = Fields[renderType];\n        }\n        return <Type {...this.props} onChange={this.onChange} />;\n    }\n}\n\nexport default inference(fromDefaultValue(visible(SchemaType)));\n","import * as React from 'react';\nimport { root, branch } from 'baobab-react/higher-order';\nimport createTree from '../Store/index';\nimport SchemaType from './SchemaType';\nimport { setErrors } from '../Store/actions';\nimport validate from './../Utils/customValidator';\n\nimport { Schema } from '../../typings/types';\n\nconst BranchedSchemaType = branch(\n    {\n        schema: 'schema',\n        status: 'status',\n        value: 'value'\n    },\n    SchemaType\n);\n\nexport type Props = {\n    onChange: (value: {}, errors: {}[]) => void,\n    schema: Schema,\n    value?: {}\n};\nfunction noop() { };\n/**\n * Top Component\n */\nclass Container extends React.Component<Props, undefined> {\n    event: boolean;\n    static defaultProps = { schema: {} };\n    private tree: any;\n    private rooted: React.StatelessComponent<{\n        onChange: (value: {}, errors?: {}[]) => void,\n        path: string[]\n    }>;\n    props: Props;\n\n    constructor(props: Props) {\n        super(props);\n        this.tree = createTree();\n        this.updateTree(props.value, props.schema);\n        this.rooted = root(this.tree, BranchedSchemaType);\n    }\n    componentDidMount() {\n        this.tree\n            .select('value')\n            .on('update', (event: { data: { currentData: {} } }) => {\n                if (this.event) {\n                    this.props.onChange(\n                        event.data.currentData,\n                        validate(\n                            event.data.currentData,\n                            this.tree.get('schema'),\n                            event.data.currentData\n                        ).errors\n                    )\n                }\n            }\n            );\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        if (\n            nextProps.value === this.tree.get('value') &&\n            nextProps.schema === this.props.schema\n        ) {\n            return;\n        }\n        this.updateTree(nextProps.value, nextProps.schema);\n    }\n    componentWillUnmount() {\n        this.tree.release();\n    }\n    shouldComponentUpdate() {\n        return false;\n    }\n    getValue() {\n        return this.tree.get('value');\n    }\n    updateTree(value?: {}, schema?: Schema) {\n        this.event = false;\n        this.tree.set('value', value);\n        this.tree.set('schema', schema);\n        this.tree.set('status', {});\n        this.tree.commit();\n        this.event = true;\n    }\n    validate() {\n        const validationResult = validate(\n            this.tree.get('value'),\n            this.tree.get('schema'),\n            this.tree.get('value')\n        );\n        const errorMap = new Map<string, string[]>();\n        // Collect each error associated with a given path\n        validationResult.errors.forEach(error => {\n            const errors = errorMap.get(error.property) || [];\n            errors.push(error.message); // Add new error\n            errorMap.set(error.property, errors);\n        });\n        errorMap.forEach((value, key) => {\n            setErrors(\n                this.tree,\n                key.split(/\\.|\\[|\\]/).filter(x => x !== '').slice(1),\n                value\n            );\n        });\n        return validationResult.errors;\n    }\n    render() {\n        const Rooted = this.rooted;\n        return <Rooted onChange={noop} path={[]} />;\n    }\n}\n\nexport default Container;\n"],"names":["schema","value","status","required","React","className","type","view","title","editKey","description","errorMessage","defaultProps","target","checked","placeholder","onChange","onInputChange","Input","TextWidget","ArrowNumberWidget","CheckboxWidget","Children","map","children","onClick","onChildRemove","onChildAdd","ArrayWidget","key","label","string","number","boolean","array","object","ObjectWidget","arrowNumber","select","SelectWidget","undefinedWidgetFactory","DefaultWidget","Object","assign","path","addKey","removeKey","alterKey","defaultWidget","Array","isArray","find","React.createElement","EMPTYOBJECT","customValidator","attributes","errored","formValue","validate","STATUS","STATE","ERRORS","NO_ERRORS","concat","length","get","splice","set","VALUE","setErrors","reduce","schemaPath","unset","dispatch","getErrors","getFormValue","errors","message","index","properties","keys","forEach","push","sort","SchemaType","EMPTY_OBJECT","additionalProperties","updateSchema","Widget","deleteSchema","renderChildren","ObjectField","StringField","state","boundChange","bind","componentWillReceiveProps","setState","props","isNaN","render","SimpleStringField","NumberField","BooleanField","filter","items","onChildChange","ArrayField","visible","toString","infer","updatePath","val","updateDefault","notifyDefaultChange","componentDidMount","componentDidUpdate","setDefaultValue","update","UndefinedField","Fields","fromDefaultValue","branch","tree","createTree","updateTree","rooted","root","BranchedSchemaType","on","event","data","currentData","componentWillUnmount","release","shouldComponentUpdate","getValue","commit","property","split","slice","noop","Container"],"mappings":"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"}