{"version":3,"file":"index.es2015.js","sources":["../src/Store/index.js","../src/Comps/Decorators/fromDefaultValue.js","../src/Comps/Views/undefinedWidgetFactory.js","../src/Comps/Decorators/labeled.js","../src/Comps/Views/Input.js","../src/Comps/Views/TextWidget.js","../src/Comps/Views/ArrowNumberWidget.js","../src/Comps/Views/CheckboxWidget.js","../src/Comps/Views/ArrayWidget.js","../src/Comps/Views/ObjectWidget.js","../src/Comps/Views/SelectWidget.js","../src/Comps/Views/index.js","../src/Comps/Views/Widget.js","../src/Utils/customValidator.js","../src/Comps/Decorators/validator.js","../src/Comps/Fields/Object.js","../src/Comps/Fields/String.js","../src/Comps/Fields/Number.js","../src/Comps/Fields/Boolean.js","../src/Comps/Fields/Array.js","../src/Comps/Fields/index.js","../src/Comps/Decorators/visible.js","../src/Comps/Fields/Undefined.js","../src/Utils/infer.js","../src/Comps/Decorators/inference.js","../src/Comps/SchemaType.js","../src/Store/actions.js","../src/Comps/Container.js","../src/index.js"],"sourcesContent":["import Baobab from 'baobab';\n\nconst createTree = () => new Baobab({\n    schema: {},\n    value: {},\n    status: {}\n});\n\nexport default createTree;\n","import React, { PropTypes } from 'react';\n\nfunction updateDefault({ value, schema: { value: defaultValue } }) {\n    const val = value !== undefined ? value : defaultValue;\n    return val;\n}\n\nfunction fromDefaultValue(Comp) {\n    class DefaultValue extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = { val: updateDefault(props) };\n        }\n        componentDidMount() {\n            this.notifyDefaultChange();\n        }\n        componentWillReceiveProps(nextProps) {\n            this.setState({ val: updateDefault(nextProps) });\n        }\n        componentDidUpdate() {\n            this.notifyDefaultChange();\n        }\n        notifyDefaultChange() {\n            if (this.props.value !== this.state.val) {\n                this.props.actions.setDefaultValue(this.props.path, this.state.val);\n            }\n        }\n        render() {\n            return (<Comp {...this.props} value={this.state.val} />);\n        }\n    }\n\n    DefaultValue.propTypes = {\n        value: PropTypes.any, // eslint-disable-line\n        schema: PropTypes.shape({ // eslint-disable-line\n            value: PropTypes.any\n        }).isRequired,\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        actions: PropTypes.shape({\n            setDefaultValue: PropTypes.func.isRequired\n        }).isRequired\n    };\n    return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","import React from 'react';\n\nfunction undefinedWidgetFactory(type) {\n    return function UndefinedWidget() {\n        return (\n            <span>\n                {`Widget for '${type}' was not defined`}\n            </span>\n        );\n    };\n}\n\nexport default undefinedWidgetFactory;\n","import React, { PropTypes } from 'react';\n\nfunction labeled(Comp) {\n    function Label(props) {\n        const required = props.schema.required;\n        const requiredClassName = required ? 'required' : '';\n        return (\n            <div>\n                <label //eslint-disable-line\n                    className={`${props.schema.type}Field ${requiredClassName}`}\n                >\n                    <span className=\"title\">{props.view.title || props.editKey}</span>\n                    <Comp {...props} />\n                    <span>{props.view.description}</span>\n                    <span>{props.errorMessage}</span>\n                </label>\n            </div>\n        );\n    }\n\n    Label.propTypes = {\n        schema: PropTypes.shape({\n            type: PropTypes.oneOfType([\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n                PropTypes.arrayOf(\n                    PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n                )\n            ]).isRequired,\n            required: PropTypes.bool,\n            description: PropTypes.string\n        }).isRequired,\n        editKey: PropTypes.string,\n        view: PropTypes.shape({\n            title: PropTypes.string,\n            description: PropTypes.string\n        }).isRequired,\n        errorMessage: PropTypes.arrayOf(PropTypes.string)\n    };\n    Label.defaultProps = {\n        editKey: '',\n        errorMessage: []\n    };\n    return Label;\n}\n\nexport default labeled;\n","import React, { PropTypes } from 'react';\n\nfunction onInputChange(func) {\n    return function onChange(event) {\n        if (event.target.type === 'checkbox') {\n            func(event.target.checked);\n        } else {\n            func(event.target.value);\n        }\n    };\n}\n\nfunction Input(props) {\n    return (\n        <input\n            type={props.type}\n            placeholder={props.schema.placeholder}\n            value={props.value}\n            className={props.className}\n            onChange={onInputChange(props.onChange)}\n            checked={props.checked}\n        />\n    );\n}\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool,\n    value: PropTypes.any, // eslint-disable-line\n    schema: PropTypes.shape({\n        placeholder: PropTypes.string\n    }).isRequired\n};\nInput.defaultProps = {\n    className: undefined,\n    checked: false\n};\nexport default Input;\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction TextWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"string\"\n        />\n    );\n}\n\nexport default labeled(TextWidget);\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction ArrowNumberWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n        />\n    );\n}\n\nexport default labeled(ArrowNumberWidget);\n","import React, { PropTypes } from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction CheckboxWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"checkbox\"\n            checked={props.value}\n        />\n    );\n}\n\nCheckboxWidget.propTypes = {\n    value: PropTypes.bool\n};\nCheckboxWidget.defaultProps = { value: false };\n\nexport default labeled(CheckboxWidget);\n","import React, { PropTypes } from 'react';\nimport labeled from '../Decorators/labeled';\n\nfunction ArrayWidget(props) {\n    function renderChild(child, index) {\n        return (<div>\n            <button onClick={props.onChildRemove(index)}>-</button>\n            {child}\n        </div>);\n    }\n\n    const children = React.Children.map(props.children, renderChild);\n    return (\n        <div>\n            <div>\n                {children}\n            </div>\n            <button onClick={props.onChildAdd}>+</button>\n        </div>\n    );\n}\n\nArrayWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired,\n    onChildRemove: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n    onChildAdd: PropTypes.func.isRequired\n};\nexport default labeled(ArrayWidget);\n","import React, { PropTypes } from 'react';\nimport labeled from '../Decorators/labeled';\n\nfunction ObjectWidget(props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    );\n}\n\nObjectWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\n\nexport default labeled(ObjectWidget);\n","import React, { PropTypes } from 'react';\n\nfunction SelectWidget({ view, value, onChange }) {\n    const choices = view.choices.map(c => (\n        <option\n            key={c.value}\n            value={c.value}\n        >\n            {c.label}\n        </option>\n    ));\n    return (\n        <select value={value} onChange={e => onChange(e.target.value)}>\n            {choices}\n        </select>\n    );\n}\nSelectWidget.propTypes = {\n    view: PropTypes.shape({\n        choices: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.any,\n            label: PropTypes.string.isRequired\n        })).isRequired\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line\n    onChange: PropTypes.func.isRequired\n};\nexport default SelectWidget;\n","import undefinedWidgetFactory from './undefinedWidgetFactory';\nimport TextWidget from './TextWidget';\nimport ArrowNumberWidget from './ArrowNumberWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport ArrayWidget from './ArrayWidget';\nimport ObjectWidget from './ObjectWidget';\nimport SelectWidget from './SelectWidget';\n\nlet DefaultWidget = {\n    string: TextWidget,\n    number: TextWidget,\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: ObjectWidget,\n    arrowNumber: ArrowNumberWidget,\n    select: SelectWidget\n};\n\nfunction defaultWidget(type) {\n    return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj) {\n    DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets, undefinedWidgetFactory };\n","import React, { PropTypes } from 'react';\nimport { defaultWidget } from './index';\n\nconst EMPTYOBJECT = {};\nfunction Widget(props) {\n    const { schema } = props;\n    const { view, ...restSchema } = schema;\n    if (view) {\n        const { type } = view;\n        if (typeof type === 'string') {\n            const Wdgt = defaultWidget(type);\n            return (\n                <Wdgt\n                    {...props}\n                    schema={restSchema}\n                    view={view}\n                />\n            );\n        }\n        if (typeof type === 'function') {\n            const Type = type;\n            return (\n                <Type\n                    {...props}\n                    schema={restSchema}\n                    view={view}\n                />\n            );\n        }\n    }\n    const renderType = Array.isArray(schema.type) ?\n        schema.type.find(t => t !== 'null') :\n        schema.type;\n    const Wdgt = defaultWidget(renderType);\n    return (\n        <Wdgt\n            {...props}\n            schema={restSchema}\n            view={view || EMPTYOBJECT}\n        />\n    );\n}\n\nWidget.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.string)\n        ]).isRequired\n    }).isRequired\n};\nexport default Widget;\n","import jsonschema, { Validator } from 'jsonschema';\n\nconst customValidator = new Validator();\ncustomValidator.attributes.errored = function validateErrored(instance, schema, options) {\n    if (typeof schema.errored !== 'function') {\n        throw new jsonschema.SchemaError('\"errored\" expects a function');\n    }\n    const msg = schema.errored(instance, options.formValue);\n    if (msg) {\n        return msg;\n    }\n    return undefined;\n};\nfunction validate(value, schema, formValue) {\n    return customValidator.validate(value, schema, {\n        formValue\n    });\n}\n\nexport default validate ;\n","import React, { PropTypes } from 'react';\nimport validate from './../../Utils/customValidator';\n\nfunction validated(Comp) {\n    function Validator(props) {\n        function onChange(val) {\n            const validation = validate(val, props.schema, props.actions.getFormValue());\n            const err = validation.errors.map(error => error.message);\n            props.onChange(val, err);\n        }\n\n        return (\n            <Comp\n                {...props}\n                errorMessage={props.actions.getErrors(props.path)}\n                onChange={onChange}\n            />\n        );\n    }\n\n    Validator.propTypes = {\n        onChange: PropTypes.func.isRequired,\n        schema: PropTypes.shape({\n            errored: PropTypes.func\n        }).isRequired,\n        value: PropTypes.any, // eslint-disable-line\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        actions: PropTypes.objectOf(PropTypes.func).isRequired\n    };\n    return Validator;\n}\n\nexport default validated;\n","import React, { PropTypes } from 'react';\nimport SchemaType from '../SchemaType';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\n\nfunction renderChildren(props) {\n    const children = [];\n    const properties = props.schema.properties || {};\n    const value = props.value || {};\n    // Holds schema properties and value properties missing from schema.\n    const mergedProperties = Object.keys(properties);\n\n    Object.keys(value).forEach((v) => {\n        if (v in properties) {\n            return;\n        }\n        mergedProperties.push(v);\n    });\n    function indexFor(property) {\n        if (properties[property] && typeof properties[property].index === 'number') {\n            return properties[property].index;\n        }\n        return 0;\n    }\n    // Index based sorting\n    function sortProperties(a, b) {\n        return indexFor(a) - indexFor(b);\n    }\n\n    mergedProperties.sort(sortProperties);\n    for (let i = 0; i < mergedProperties.length; i += 1) {\n        const prop = mergedProperties[i];\n        if (prop in properties) {\n            children.push(\n                <SchemaType\n                    {...props}\n                    schema={properties[prop]}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        } else {\n            const schema = props.schema.defaultProperties;\n            if (schema) {\n                props.actions.updateSchema(props.path.concat([prop]), schema);\n            }\n            children.push(\n                <SchemaType\n                    {...props}\n                    schema={schema}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        }\n    }\n    return children;\n}\n\nfunction ObjectField(props) {\n    function addKey(key, value) {\n        props.onChange(Object.assign({}, props.value, {\n            [key]: value\n        }));\n    }\n\n    function removeKey(key) {\n        const value = Object.assign({}, props.value);\n        delete value[key];\n        props.actions.deleteSchema(props.path.concat([key]), {});\n        props.onChange(value);\n    }\n\n    function alterKey(key, newKey) {\n        const value = {};\n        Object.keys(props.value).forEach((p) => {\n            if (p !== key) {\n                value[p] = props.value[p];\n            } else {\n                value[newKey] = props.value[p];\n            }\n        });\n        props.onChange(value);\n    }\n    return (\n        <Widget\n            {...props}\n            addKey={addKey}\n            removeKey={removeKey}\n            alterKey={alterKey}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nObjectField.propTypes = {\n    schema: PropTypes.shape({ // eslint-disable-line react/no-unused-prop-types\n        properties: PropTypes.object\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    path: PropTypes.arrayOf( // eslint-disable-line react/no-unused-prop-types\n        PropTypes.string\n    ).isRequired,\n    onChange: PropTypes.func.isRequired\n};\nObjectField.defaultProps = {\n    value: {}\n};\n\nexport default validator(fromDefaultValue(ObjectField));\n","import React, { PropTypes } from 'react';\nimport Widget from '../Views/Widget';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport validator from '../Decorators/validator';\n\nfunction StringField(props) {\n    const val = props.value !== undefined && props.value !== null ?\n        String(props.value) :\n        props.value;\n    return (\n        <Widget\n            {...props}\n            value={val}\n        />\n    );\n}\n\nStringField.propTypes = {\n    value: PropTypes.oneOfType([ // eslint-disable-line react/require-default-props\n        PropTypes.number,\n        PropTypes.string\n    ])\n};\nexport { StringField as SimpleStringField };\nexport default validator(fromDefaultValue(StringField));\n","import React, { PropTypes } from 'react';\nimport validator from '../Decorators/validator';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport { SimpleStringField } from './String';\n\nclass NumberField extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value\n        };\n        this.boundChange = this.onChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        // if numerical values differ: update\n        if (Number(this.state.value) !== Number(nextProps.value)) {\n            this.setState({\n                value: nextProps.value\n            });\n        }\n    }\n    onChange(val) {\n        const value = val === '' ? undefined : val;\n        const numVal = Number(value);\n        this.setState({\n            value\n        }, () => this.props.onChange(isNaN(numVal) ? value : numVal));\n    }\n    render() {\n        return (\n            <SimpleStringField\n                {...this.props}\n                value={this.state.value}\n                onChange={this.boundChange}\n            />\n        );\n    }\n}\nNumberField.propTypes = {\n    value: PropTypes.number, // eslint-disable-line react/require-default-props\n    onChange: PropTypes.func.isRequired\n};\n\nexport default validator(fromDefaultValue(NumberField));\n","import React from 'react';\nimport Widget from '../Views/Widget';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport validator from './../Decorators/validator';\n\nfunction BooleanField(props) {\n    return (<Widget {...props} />);\n}\n\nexport default validator(fromDefaultValue(BooleanField));\n","import React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\n\nfunction onChildChange(index, props) {\n    return function onChange(val) {\n        const { value } = props;\n        if (value) {\n            props.onChange(value.map((e, i) => {\n                if (+i !== +index) {\n                    return e;\n                }\n                return val;\n            }));\n        } else {\n            props.onChange([val]);\n        }\n    };\n}\n\nfunction onChildRemove(props) {\n    return function onRemove(index) {\n        return function doRemove() {\n            const oldValue = props.value || [];\n            props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n        };\n    };\n}\n\nfunction onChildAdd(props) {\n    return function onAdd() {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.concat([undefined]));\n    };\n}\n\nfunction renderChildren(props) {\n    const { value, schema: { defaultValue, items } } = props;\n    let valueItems;\n    if (value) {\n        valueItems = value;\n    } else if (defaultValue) {\n        valueItems = defaultValue;\n    } else {\n        valueItems = [];\n    }\n    const children = [];\n    valueItems.forEach((val, i) => children.push(\n        <SchemaType\n            {...props}\n            schema={Array.isArray(items) ? (items[i] || {}) : items}\n            value={val}\n            editKey={String(i)}\n            key={i} // eslint-disable-line react/no-array-index-key, should UID\n            onChange={onChildChange(i, props)}\n        />\n    ));\n    return children;\n}\n\nfunction ArrayField(props) {\n    return (\n        <Widget\n            {...props}\n            onChildAdd={onChildAdd(props)}\n            onChildRemove={onChildRemove(props)}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default fromDefaultValue(ArrayField);\n","import ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n    object: ObjectField,\n    string: StringField,\n    number: NumberField,\n    boolean: BooleanField,\n    array: ArrayField\n};\n","import React, { PropTypes } from 'react';\n\nfunction visibility(Comp) {\n    function Visible(props) {\n        const { schema: { visible }, value } = props;\n        if (visible && !visible(value, props.actions.getFormValue())) {\n            return null;\n        }\n        return (<Comp {...props} />);\n    }\n\n    Visible.propTypes = {\n        schema: PropTypes.shape({\n            visible: PropTypes.func\n        }).isRequired,\n        actions: PropTypes.objectOf(PropTypes.func).isRequired,\n        value: PropTypes.any // eslint-disable-line\n    };\n    return Visible;\n}\n\nexport default visibility;\n","import React, { PropTypes } from 'react';\n\nfunction Undefined(props) {\n    return (<span>{`Undefined field type \"${props.schema.type}\", [${props.path}]`}</span>);\n}\n\nUndefined.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n            PropTypes.arrayOf(\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n            )\n        ]).isRequired\n    }).isRequired,\n    path: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Undefined;\n","export default function infer(value) {\n    switch (typeof value) {\n    case 'number':\n        return 'number';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'boolean';\n    case 'object':\n        return Array.isArray(value) ? 'array' : 'object';\n    default:\n        return 'string';\n    }\n}\n","import React, { PropTypes } from 'react';\nimport infer from './../../Utils/infer';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath, editKey) {\n    if (editKey) {\n        return currentPath.concat([editKey]);\n    }\n    return currentPath;\n}\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param {React.Component} Comp component to decorate.\n * @return {React.Component} the decorated component.\n */\nfunction inference(Comp) {\n    function Infer(props) {\n        const { schema } = props;\n        const path = updatePath(props.path, props.editKey);\n        let inferedSchema = schema;\n        if (!inferedSchema || !('type' in inferedSchema)) {\n            inferedSchema = { type: infer(props.value) };\n            // props.actions.updateSchema(path, schema);\n        }\n        return (\n            <Comp\n                {...props}\n                path={path}\n                schema={inferedSchema}\n            />\n        );\n    }\n\n    Infer.propTypes = {\n        schema: PropTypes.object, // eslint-disable-line\n        value: PropTypes.any, // eslint-disable-line\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        editKey: PropTypes.string // eslint-disable-line react/require-default-props\n    };\n    return Infer;\n}\n\nexport default inference;\n","import React, { PropTypes } from 'react';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\n\n\n/**\n * bind function callback with its path\n * @param {function(Array<String>)} func callback function to bind\n * @param {Array<string>} path the value's path to act on\n */\nfunction doAction(func, path) {\n    return function action(...args) {\n        func(path, ...args);\n    };\n}\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = doAction(props.actions.update, props.path);\n    }\n    shouldComponentUpdate(...args) {\n        return shouldPureComponentUpdate.apply(this, args);\n    }\n    render() {\n        const { schema: { type } } = this.props;\n        const renderType = Array.isArray(type) ? type.find(t => t !== 'null') : type;\n        const Type = Fields[renderType] || UndefinedField;\n        return (\n            <Type\n                {...this.props}\n                onChange={this.onChange}\n            />\n        );\n    }\n}\n\nSchemaType.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n            PropTypes.arrayOf(\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n            )\n        ]).isRequired\n    }).isRequired,\n    path: PropTypes.arrayOf(PropTypes.string).isRequired,\n    actions: PropTypes.objectOf(PropTypes.func).isRequired\n};\n\nexport default inference(visible(SchemaType));\n","const VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = 'state';\nconst ERRORS = 'errors';\nconst NOERRORS = [];\n\nexport function setErrors(tree, path, errors) {\n    const errorPath = [STATUS].concat(path).concat([ERRORS]);\n    const errorsCursor = tree.select(errorPath);\n    if (errors && errors.length && Array.isArray(errorsCursor.get())) {\n        errorsCursor.splice([0, errorsCursor.get().length]);\n        errorsCursor.concat(errors || []);\n    } else {\n        errorsCursor.set(errors || NOERRORS);\n    }\n}\n\n/**\n * Update a value in the tree\n *\n * @param {Baobab} tree the tree\n * @param {Array<string>} path path's value to update\n * @param value value to set\n * @param {Array<string>} errors errors relative to the value\n */\nexport function update(tree, path, value, errors) {\n    const statusPath = [STATUS].concat(path);\n    tree.set([VALUE].concat(path), value);\n    tree.set(statusPath.concat([STATE]), 'dirty');\n    setErrors(tree, path, errors);\n}\n\nexport function setDefaultValue(tree, path, value) {\n    tree.set([VALUE].concat(path), value);\n    tree.set([STATUS].concat(path).concat([STATE]), 'pristine');\n}\n\nexport function getStatus(tree, path) {\n    return tree.get([STATUS].concat(path).concat([STATE]));\n}\n\nexport function getErrors(tree, path) {\n    return tree.get([STATUS].concat(path).concat([ERRORS])) || NOERRORS;\n}\n\nexport function getFormValue(tree) {\n    return tree.get(VALUE);\n}\n/**\n * handle object's \"properties\" path and array's \"item\" path\n */\nfunction schemaPath(tree, path) {\n    return path.reduce((prev, val) => {\n        if (tree.get(prev).type === 'object') {\n            return prev.concat(['properties', val]);\n        } else if (tree.get(prev).type === 'array') {\n            return prev.concat(['items']);\n        }\n        return prev.concat([val]);\n    }, ['schema']);\n}\nexport function updateSchema(tree, path, value) {\n    const updatedPath = schemaPath(tree, path);\n    tree.set(updatedPath, value);\n}\n\nexport function deleteSchema(tree, path) {\n    const updatedPath = schemaPath(tree, path);\n    tree.unset(updatedPath);\n}\n","import React, { PropTypes } from 'react';\nimport { root, branch } from 'baobab-react/higher-order';\nimport createTree from '../Store/index';\nimport SchemaType from './SchemaType';\nimport * as actions from '../Store/actions';\nimport validate from './../Utils/customValidator';\n\nconst BranchedSchemaType = branch({\n    schema: 'schema',\n    status: 'status',\n    value: 'value'\n}, SchemaType);\nconst TYPES = ['string', 'number', 'boolean', 'object', 'array', 'null'];\n/**\n * Top Component\n */\nclass Container extends React.Component {\n    constructor(props) {\n        super(props);\n        this.tree = createTree();\n        this.updateTree(props.value, props.schema);\n        // should use dispatcher instead. from baobab-react v2\n        this.ACTIONS = {};\n        Object.keys(actions)\n            .forEach(action => (\n                this.ACTIONS[action] = actions[action].bind(this.tree, this.tree)\n            ));\n        this.rooted = root(this.tree, BranchedSchemaType);\n    }\n    componentWillReceiveProps(nextProps) {\n        this.updateTree(nextProps.value, nextProps.schema);\n    }\n    shouldComponentUpdate() {\n        return false;\n    }\n    componentWillUnmount() {\n        this.tree.release();\n    }\n    getValue() {\n        return this.tree.get('value');\n    }\n    updateTree(value, schema) {\n        this.tree.select('value').release();\n        this.tree.select('value').set(value);\n        this.tree.select('schema').set(schema);\n        this.tree.select('status').release();\n        this.tree.commit();\n        this.tree.select('value')\n            .on('update', event =>\n                this.props.onChange(\n                    event.data.currentData,\n                    validate(\n                        event.data.currentData,\n                        this.tree.get('schema'),\n                        event.data.currentData\n                    ).errors\n                )\n            );\n    }\n    validate() {\n        const validationResult = validate(this.tree.get('value'),\n            this.tree.get('schema'), this.tree.get('value'));\n        const { setErrors } = this.ACTIONS;\n        const errorMap = new Map();\n        // Collect each error associated with a given path\n        validationResult.errors.forEach((error) => {\n            const errors = errorMap.get(error.property) || [];\n            errors.push(error.message); // Add new error\n            errorMap.set(error.property, errors);\n        });\n        errorMap.forEach((value, key) => {\n            setErrors(key.split(/\\.|\\[|\\]/).filter(x => x !== '').slice(1), value);\n        });\n        return validationResult.errors;\n    }\n    render() {\n        const Rooted = this.rooted;\n        return (\n            <Rooted\n                onChange={this.props.onChange}\n                path={[]}\n                actions={this.ACTIONS}\n            />\n        );\n    }\n}\nContainer.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([PropTypes.oneOf(TYPES),\n            PropTypes.arrayOf(PropTypes.oneOf(TYPES))])\n    }),\n    value: PropTypes.any // eslint-disable-line\n};\nContainer.defaultProps = {\n    schema: {}\n};\n\nexport default Container;\n","import Container from './Comps/Container';\nimport { setDefaultWidgets } from './Comps/Views/index';\n\nContainer.setDefaultWidgets = setDefaultWidgets;\nexport default Container;\n"],"names":["schema","value","status","d","defaultValue","c","props","state","val","updateDefault","componentDidMount","notifyDefaultChange","componentWillReceiveProps","setState","nextProps","componentDidUpdate","actions","setDefaultValue","path","render","a","React","Component","type","required","e","className","requiredClassName","view","title","editKey","description","errorMessage","defaultProps","Label","target","func","event","checked","placeholder","onChange","onInputChange","Input","TextWidget","ArrowNumberWidget","CheckboxWidget","Children","map","children","onClick","onChildRemove","index","child","onChildAdd","ArrayWidget","ObjectWidget","g","choices","key","label","string","number","boolean","array","object","arrowNumber","select","SelectWidget","undefinedWidgetFactory","DefaultWidget","Object","assign","obj","defaultWidget","h","restSchema","Array","isArray","find","renderType","EMPTYOBJECT","customValidator","attributes","errored","SchemaError","instance","options","formValue","msg","validate","getErrors","getFormValue","validation","errors","message","err","property","properties","j","keys","forEach","v","mergedProperties","push","sort","indexFor","b","k","i","length","prop","SchemaType","defaultProperties","updateSchema","concat","Widget","addKey","removeKey","deleteSchema","alterKey","p","newKey","renderChildren","ObjectField","fromDefaultValue","StringField","boundChange","bind","f","isNaN","numVal","SimpleStringField","NumberField","BooleanField","oldValue","filter","items","onChildChange","ArrayField","visible","currentPath","updatePath","infer","inferedSchema","args","doAction","update","shouldComponentUpdate","apply","Fields","UndefinedField","STATUS","STATE","ERRORS","NOERRORS","tree","errorPath","errorsCursor","get","splice","set","VALUE","statusPath","setErrors","reduce","prev","schemaPath","updatedPath","unset","branch","TYPES","Container","createTree","updateTree","ACTIONS","action","rooted","root","BranchedSchemaType","componentWillUnmount","release","getValue","commit","on","data","currentData","errorMap","error","split","slice","validationResult","setDefaultWidgets"],"mappings":"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"}