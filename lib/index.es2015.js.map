{"version":3,"file":"index.es2015.js","sources":["../src/Store/index.ts","../src/Comps/defaultWidgets.tsx","../src/Comps/Fields/Widget.tsx","../src/Utils/customValidator.ts","../src/Store/actions.ts","../src/Comps/Decorators/validator.tsx","../src/Comps/Fields/Object.tsx","../src/Comps/Fields/String.tsx","../src/Comps/Fields/Number.tsx","../src/Comps/Fields/Boolean.tsx","../src/Comps/Fields/Array.tsx","../src/Comps/Fields/index.tsx","../src/Comps/Decorators/visible.tsx","../src/Comps/Fields/Undefined.tsx","../src/Utils/infer.ts","../src/Comps/Decorators/inference.tsx","../src/Comps/Decorators/fromDefaultValue.tsx","../src/Comps/SchemaType.tsx","../src/Comps/Container.tsx"],"sourcesContent":["import Baobab from 'baobab';\n\nconst createTree = () => new Baobab({\n    schema: {},\n    value: {},\n    status: {}\n});\n\nexport default createTree;\n","import * as React from 'react';\nimport { WidgetProps } from '../../typings/types';\n\nexport type WidgetMap = {\n    [key: string]: React.ComponentClass<WidgetProps> | React.SFC<WidgetProps>;\n};\n\nfunction undefinedWidgetFactory(type: string) {\n    return function UndefinedWidget() {\n        return <span>{`Widget for '${type}' was not defined`}</span>;\n    };\n}\nlet DefaultWidget: WidgetMap = {};\n\nfunction defaultWidget(type: string) {\n    return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj: WidgetMap) {\n    DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets };\n","import * as React from 'react';\nimport { defaultWidget } from '../defaultWidgets';\n\nimport { WidgetProps, TYPESTRING, Schema } from '../../../typings/types';\n\ntype Props = {\n    value?: {};\n    schema: Schema & { type: TYPESTRING };\n    editKey: string;\n    onChange: (value?: {}) => void;\n    errorMessage?: string[];\n    path: string[];\n    children?: (React.ComponentClass<WidgetProps> | React.SFC<WidgetProps>)[];\n    addKey?: (key: string, value: {}) => void;\n    removeKey?: (key: string) => void;\n    alterKey?: (key: string, newKey: string) => void;\n    onChildAdd?: () => void;\n    onChildRemove?: (index: number) => void;\n};\n\nconst EMPTYOBJECT = {};\nfunction Widget<P extends Props>(props: P) {\n    const {\n        value,\n        schema,\n        schema: { view },\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage,\n    } = props;\n    const forwardProps = {\n        value,\n        schema,\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage,\n    };\n    if (view) {\n        const { type } = view;\n        if (typeof type === 'string') {\n            const Wdgt = defaultWidget(type);\n            return <Wdgt {...forwardProps} view={view} />;\n        }\n        if (typeof type === 'function') {\n            const Type = type;\n            return <Type {...forwardProps} view={view} />;\n        }\n    }\n    let renderType = Array.isArray(schema.type)\n        ? (schema.type as TYPESTRING[]).find(t => t !== 'null')\n        : schema.type;\n    let Wdgt;\n    if (renderType === undefined) {\n        Wdgt = defaultWidget('undefinedType');\n    } else {\n        Wdgt = defaultWidget(renderType);\n    }\n    return <Wdgt {...forwardProps} view={view || EMPTYOBJECT} />;\n}\n\nexport default Widget;\n","import * as jsonschema from 'jsonschema';\nimport { ValidatorResult } from \"jsonschema/lib\";\nimport { Schema, ErrorFn } from '../../typings/types';\n\nconst customValidator = new jsonschema.Validator();\ncustomValidator.attributes.errored = function validateErrored(\n    instance: {},\n    schema: { errored?: ErrorFn },\n    options: { formValue: {} }\n) {\n    if (typeof schema.errored !== 'function') {\n        throw new jsonschema.SchemaError('\"errored\" expects a function');\n    }\n    const msg = schema.errored(instance, options.formValue);\n    if (msg) {\n        return msg;\n    }\n    return undefined;\n};\nfunction validate(\n    value: {},\n    schema: Schema,\n    formValue: {}\n): ValidatorResult {\n    return customValidator.validate(value, schema, { formValue });\n}\n\nexport default validate;\n","import { ValidationError } from 'jsonschema/lib';\n\n/*\nEvery tree should be of type Baobab\n*/\nconst VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = 'state';\nconst ERRORS = 'errors';\nconst NO_ERRORS: string[] = [];\n\nfunction setErrors(tree: any, path: string[] = [], errors: string[]) {\n    const errorPath = [STATUS].concat(path).concat([ERRORS]);\n    const errorsCursor = tree.select(errorPath);\n    if (errors && errors.length && Array.isArray(errorsCursor.get())) {\n        errorsCursor.splice([0, errorsCursor.get().length]);\n        errorsCursor.concat(errors || []);\n    } else {\n        errorsCursor.set(errors || NO_ERRORS);\n    }\n}\nexport function setValidationErrors(\n    tree: any,\n    path: string[] = [],\n    errors: ValidationError[]\n) {\n    const errorMap = new Map<string, string[]>();\n    // Collect each error associated with a given path\n    errors.forEach(error => {\n        const errors = errorMap.get(error.property) || [];\n        errors.push(error.message); // Add new error\n        errorMap.set(error.property, errors);\n    });\n    setErrors(tree, path, NO_ERRORS);\n    errorMap.forEach((value, key) => {\n        setErrors(\n            tree,\n            path.concat(\n                key\n                    .split(/\\.|\\[|\\]/)\n                    .filter(x => x !== '')\n                    .slice(1)\n            ),\n            value\n        );\n    });\n}\n\n/**\n * Update a value in the tree\n *\n * @param {Baobab} tree the tree\n * @param {Array<string>} path path's value to update\n * @param value value to set\n * @param {Array<string>} errors errors relative to the value\n */\nexport function update(\n    tree: any,\n    path: string[] = [],\n    value: {},\n    errors: ValidationError[]\n) {\n    const statusPath = [STATUS].concat(path);\n    tree.set([VALUE].concat(path), value);\n    tree.set(statusPath.concat([STATE]), 'dirty');\n    setValidationErrors(tree, path, errors);\n}\n\nexport function setDefaultValue(tree: any, path: string[] = [], value: {}) {\n    tree.set([VALUE].concat(path), value);\n    tree.set([STATUS].concat(path).concat([STATE]), 'pristine');\n}\n\nexport function getStatus(tree: any, path: string[] = []) {\n    const statePath = [STATUS].concat(path).concat([STATE]);\n    if (tree.exists(statePath)) {\n        return tree.get([STATUS].concat(path).concat([STATE]));\n    }\n    return undefined;\n}\n\nexport function getErrors(tree: any, path: string[] = []) {\n    return tree.get([STATUS].concat(path).concat([ERRORS])) || NO_ERRORS;\n}\n\nexport function getFormValue(tree: any) {\n    return tree.get(VALUE);\n}\n","import * as React from 'react';\nimport validate from './../../Utils/customValidator';\nimport { getFormValue, getErrors } from '../../Store/actions';\n\nimport { Schema, Action } from '../../../typings/types';\nimport { ValidationError } from 'jsonschema/lib';\n\ntype Props = {\n    schema: Schema;\n    value?: {};\n    dispatch: (action: Action, ...args: {}[]) => any;\n    path: string[];\n    onChange: (value: {}, errors?: ValidationError[]) => void;\n};\n\nfunction validated<P extends Props>(\n    Comp: React.ComponentClass<any> | React.SFC<any>\n) {\n    function Validator(props: P) {\n        function onChange(val: {}): void {\n            const validation = validate(\n                val,\n                props.schema,\n                props.dispatch(getFormValue)\n            );\n            props.onChange(val, validation.errors);\n        }\n        // console.log(getErrors);\n        return (\n            <Comp\n                {...props}\n                errorMessage={props.dispatch(getErrors, props.path)}\n                onChange={onChange}\n            />\n        );\n    }\n    return Validator;\n}\n\nexport default validated;\n","import * as React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from './Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema.Object;\n    status: { [key: string]: {} };\n    editKey: string;\n    value: {\n        [key: string]: {};\n    };\n    path: string[];\n    onChange: (value: {}) => void;\n};\n\nconst EMPTY_OBJECT = {};\n\nfunction renderChildren(props: Props): JSX.Element[] {\n    const children = [];\n    const properties = props.schema.properties || {};\n    const value: { [key: string]: {} } = props.value || {};\n    // Holds schema properties and value properties missing from schema.\n    const mergedProperties: Array<string> = Object.keys(properties);\n\n    Object.keys(value).forEach(v => {\n        if (v in properties) {\n            return;\n        }\n        mergedProperties.push(v);\n    });\n    function indexFor(property: string): number {\n        if (properties[property]) {\n            const index = properties[property].index;\n            if (typeof index === 'number') {\n                return index;\n            }\n        }\n        return 0;\n    }\n    // Index based sorting\n    function sortProperties(a: string, b: string): number {\n        return indexFor(a) - indexFor(b);\n    }\n\n    mergedProperties.sort(sortProperties);\n    for (let i: number = 0; i < mergedProperties.length; i += 1) {\n        const prop: string = mergedProperties[i];\n        if (prop in properties) {\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={properties[prop]}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={i}\n                />\n            );\n        } else {\n            const schema = props.schema.additionalProperties;\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={schema}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={i}\n                />\n            );\n        }\n    }\n    return children;\n}\n\nfunction ObjectField(props: Props) {\n    function addKey(key: string, value: {}): void {\n        if (typeof props.value === 'object' && key in props.value) {\n            throw new Error(`Property \"${key}\" already exists`);\n        }\n        props.onChange(\n            Object.assign({}, props.value, {\n                [key]: value,\n            })\n        );\n    }\n\n    function removeKey(key: string): void {\n        const value: { [key: string]: {} } = Object.assign({}, props.value);\n        delete value[key];\n        props.onChange(value);\n    }\n\n    function alterKey(key: string, newKey: string): void {\n        if (key === newKey) {\n            return;\n        }\n        if (newKey in props.value) {\n            throw new Error(`Property \"${key}\" already exists`);\n        }\n        const value: { [key: string]: {} } = {};\n        Object.keys(props.value).forEach(p => {\n            if (p !== key) {\n                value[p] = props.value[p];\n            } else {\n                value[newKey] = props.value[p];\n            }\n        });\n        props.onChange(value);\n    }\n    return (\n        <Widget\n            {...props as any}\n            addKey={addKey}\n            removeKey={removeKey}\n            alterKey={alterKey}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default validator(ObjectField);\n","import * as React from 'react';\nimport Widget from './Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' };\n    value?: number | string;\n    editKey: string;\n    path: string[];\n    onChange: (value: string | number) => void;\n    dispatch: (action: Action, ...args: {}[]) => any;\n};\n\nfunction StringField(props: Props) {\n    return <Widget {...props} />;\n}\n\nexport { StringField as SimpleStringField };\nexport default validator(StringField);\n","import * as React from 'react';\nimport validator from '../Decorators/validator';\nimport { SimpleStringField } from './String';\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' };\n    value?: number;\n    editKey: string;\n    path: string[];\n    dispatch: (action: Action, ...args: {}[]) => any;\n    onChange: (value: string | void | number) => void;\n};\n\nclass NumberField extends React.Component<Props, { value?: string | number }> {\n    boundChange: (value: number | string) => void;\n    props: Props;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            value: props.value,\n        };\n        this.boundChange = this.onChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps: Props) {\n        // if numerical values differ: update\n        if (Number(this.state.value) !== Number(nextProps.value)) {\n            this.setState({\n                value: nextProps.value,\n            });\n        }\n    }\n    onChange(val?: string | number) {\n        const value: string | number | undefined = val === '' ? undefined : val;\n        const numVal = Number(value);\n        this.setState(\n            {\n                value,\n            },\n            () => this.props.onChange(isNaN(numVal) ? value : numVal)\n        );\n    }\n    render() {\n        return (\n            <SimpleStringField\n                {...this.props}\n                value={this.state.value}\n                onChange={this.boundChange}\n            />\n        );\n    }\n}\n\nexport default validator(NumberField);\n","import * as React from 'react';\nimport Widget from './Widget';\nimport validator from './../Decorators/validator';\n\nimport{ Schema, Action } from '../../../typings/types';\n\nfunction BooleanField(\n    props: {\n        schema: Schema & { type: 'boolean' },\n        editKey: string,\n        path: string[],\n        value: boolean,\n        onChange: (value: boolean) => void,\n        dispatch: (action: Action, ...args: {}[]) => any,\n    }\n) {\n    return <Widget {...(props)} />;\n}\n\nexport default validator(BooleanField);\n","import * as React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from './Widget';\nimport validator from '../Decorators/validator';\n\nimport { Schema, Action } from '../../../typings/types';\n\ntype Props = {\n    onChange: (val: {}[]) => void;\n    schema: Schema & {\n        type: 'array';\n        items?: Schema[] | Schema;\n        value?: {}[];\n    };\n    dispatch: (action: Action, ...args: {}[]) => any;\n    value?: {}[];\n    editKey: string;\n    status: { [key: string]: {} };\n    path: string[];\n    [key: string]: any;\n};\nconst EMPTY_OBJECT = {};\n\nfunction onChildChange(index: number, props: Props) {\n    return function onChange(val: {}) {\n        const { value } = props;\n        if (value) {\n            props.onChange(\n                value.map((e, i) => {\n                    if (+i !== +index) {\n                        return e;\n                    }\n                    return val;\n                })\n            );\n        } else {\n            props.onChange([val]);\n        }\n    };\n}\n\nfunction onChildRemove(props: Props) {\n    return function onRemove(index: number) {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n    };\n}\n\nfunction onChildAdd(props: Props) {\n    return function onAdd(value?: {}) {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.concat([value]));\n    };\n}\n\nfunction renderChildren(props: Props) {\n    const { value, schema: { value: defaultValue, items } } = props;\n    let valueItems: {}[];\n    if (value) {\n        valueItems = value;\n    } else if (defaultValue) {\n        valueItems = defaultValue as {}[];\n    } else {\n        valueItems = [];\n    }\n    const children: JSX.Element[] = [];\n    valueItems.forEach((val, i) =>\n        children.push(\n            <SchemaType\n                {...props}\n                schema={Array.isArray(items) ? items[i] || {} : items}\n                value={val}\n                editKey={String(i)}\n                status={props.status[String(i)] || EMPTY_OBJECT}\n                key={i}\n                onChange={onChildChange(i, props)}\n            />\n        )\n    );\n    return children;\n}\n\nfunction ArrayField(props: Props) {\n    return (\n        <Widget\n            {...props as any}\n            onChildAdd={onChildAdd(props)}\n            onChildRemove={onChildRemove(props)}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default validator(ArrayField);\n","import ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n    object: ObjectField,\n    string: StringField,\n    number: NumberField,\n    boolean: BooleanField,\n    array: ArrayField\n};\n","import * as React from 'react';\nimport { getFormValue } from '../../Store/actions';\nimport { Action, Schema } from '../../../typings/types';\n\ntype Props = {\n    schema: Schema;\n    path: string[];\n    value?: {};\n    dispatch: (action: Action, ...args: {}[]) => any;\n};\nfunction visibility<P extends Props>(\n    Comp: React.ComponentClass<P> | React.SFC<P>\n): React.SFC<P> {\n    return function Visible(props: P) {\n        const { schema: { visible }, value } = props;\n        try {\n            if (\n                visible &&\n                !visible(value, props.dispatch(getFormValue), props.path)\n            ) {\n                return null!;\n            }\n        } catch (e) {\n            return null!;\n        }\n        return <Comp {...props} />;\n    };\n}\n\nexport default visibility;\n","import * as React from 'react';\n\nimport { WidgetProps } from '../../../typings/types';\n\nfunction Undefined(props: WidgetProps) {\n    return (\n        <div>{`Undefined field type \"${props.schema.type!.toString()}\", [${props.path.toString()}]`}</div>\n    );\n}\n\nexport default Undefined;\n","export default function infer(value?: {}) {\n    switch (typeof value) {\n        case 'number':\n            return 'number';\n        case 'string':\n            return 'string';\n        case 'boolean':\n            return 'boolean';\n        case 'object':\n            return Array.isArray(value) ? 'array' : 'object';\n        default:\n            return 'string';\n    }\n}\n","import * as React from 'react';\nimport infer from './../../Utils/infer';\nimport { Schema } from '../../../typings/types';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath: string[], editKey?: string): string[] {\n    if (editKey !== undefined) {\n        return currentPath.concat([editKey]);\n    }\n    return currentPath;\n}\ntype Props = {\n    path: string[],\n    editKey?: string,\n    value?: {},\n    schema?: Schema\n};\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param {React.Component} Comp component to decorate.\n * @return {React.Component} the decorated component.\n */\nfunction inference<P extends Props>(\n    Comp: React.ComponentClass<P> | React.SFC<P>\n) {\n    class Infer extends React.Component<Partial<P> & Props, { schema: Schema }> {\n        path: string[];\n        state: {\n            schema: Schema\n        };\n        constructor(props: P) {\n            super(props);\n            const { schema } = props;\n            let inferredSchema = schema || {};\n            if (!('type' in inferredSchema)) {\n                inferredSchema = { type: infer(props.value), ...inferredSchema };\n            }\n            this.state = { schema: inferredSchema };\n            this.path = updatePath(this.props.path, this.props.editKey);\n        }\n        componentWillReceiveProps(nextProps: P) {\n            if(nextProps.editKey !== this.props.editKey || nextProps.path !== this.props.path){\n                this.path = updatePath(nextProps.path, nextProps.editKey);\n            }\n            if (this.props.schema !== nextProps.schema) {\n                let inferredSchema = nextProps.schema || {};\n                if (!('type' in inferredSchema)) {\n                    inferredSchema = { type: infer(nextProps.value), ...inferredSchema };\n                }\n                this.setState(() => ({ schema: inferredSchema }));\n            }\n        }\n        render() {\n            return (\n                <Comp {...(this.props) } path={this.path} schema={this.state.schema} />\n            );\n        }\n    }\n    return Infer;\n}\n\nexport default inference;\n","import * as React from 'react';\nimport { setDefaultValue } from '../../Store/actions';\nimport { Action, Schema } from '../../../typings/types';\n\nexport type Props = {\n    editKey?: string;\n    path: string[];\n    status: {\n        state?: string;\n    };\n    value?: {};\n    schema: Schema;\n    dispatch: (action: Action, ...args: ({} | void)[]) => any;\n};\nfunction updateDefault({ value, schema: { value: defaultValue } }: Props) {\n    const val = value !== undefined ? value : defaultValue;\n    return val;\n}\n\nfunction fromDefaultValue<P extends Props>(\n    Comp: React.ComponentClass<P> | React.SFC<P>\n) {\n    class DefaultValue extends React.Component<P, { val?: {} }> {\n        constructor(props: P) {\n            super(props);\n            this.state = { val: updateDefault(props) };\n            this.notifyDefaultChange();\n        }\n        componentDidMount() {}\n        componentWillReceiveProps(nextProps: P) {\n            if (nextProps.status.state === undefined) {\n                this.setState({ val: updateDefault(nextProps) });\n            } else {\n                this.setState({ val: nextProps.value });\n            }\n        }\n        componentDidUpdate() {\n            this.notifyDefaultChange();\n        }\n        notifyDefaultChange() {\n            if (this.props.value !== this.state.val) {\n                this.props.dispatch(\n                    setDefaultValue,\n                    this.props.path,\n                    this.state.val\n                );\n            }\n        }\n        render() {\n            return <Comp {...this.props} value={this.state.val} />;\n        }\n    }\n\n    return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","import * as React from 'react';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\nimport fromDefaultValue from './Decorators/fromDefaultValue';\nimport { update } from '../Store/actions';\n\nimport { Schema, Action, TYPESTRING } from '../../typings/types';\n\ntype SchemaProps = {\n    schema: Schema,\n    status: { [key: string]: {} },\n    path: string[],\n    dispatch: (action: Action, ...args: {}[]) => any,\n    editKey?: string,\n    value?: {}\n};\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType<P extends SchemaProps> extends React.Component<P> {\n    static defaultProps = {\n        path: []\n    };\n    onChange: ({ }) => void;\n    constructor(props: P) {\n        super(props);\n        this.onChange = (...args: {}[]) => {\n            props.dispatch(update, this.props.path, ...args);\n        };\n    }\n    render() {\n        const { schema: { type } } = this.props;\n        const renderType = Array.isArray(type)\n            ? (type as TYPESTRING[]).find(t => t !== 'null')\n            : type;\n        let Type: React.ComponentClass<any> | React.SFC<any>;\n        if (renderType === undefined || renderType === 'null') {\n            Type = UndefinedField;\n        } else {\n            Type = Fields[renderType];\n        }\n        return <Type {...this.props} onChange={this.onChange} />;\n    }\n}\n\nexport default inference(fromDefaultValue(visible(SchemaType)));\n","import * as React from 'react';\nimport { root, branch } from 'baobab-react/higher-order';\nimport createTree from '../Store/index';\nimport SchemaType from './SchemaType';\nimport validate from './../Utils/customValidator';\nimport { setValidationErrors } from '../Store/actions';\n\nimport { Schema } from '../../typings/types';\n\nconst BranchedSchemaType = branch(\n    {\n        schema: 'schema',\n        status: 'status',\n        value: 'value'\n    },\n    SchemaType\n);\n\nexport type Props = {\n    onChange: (value: {}, errors: {}[]) => void,\n    schema: Schema,\n    value?: {}\n};\nfunction noop() { };\n/**\n * Top Component\n */\nclass Container extends React.Component<Props, undefined> {\n    event: boolean;\n    static defaultProps = { schema: {} };\n    private tree: any;\n    private rooted: React.StatelessComponent<{\n        onChange: (value: {}, errors?: {}[]) => void,\n        path: string[]\n    }>;\n    props: Props;\n\n    constructor(props: Props) {\n        super(props);\n        this.tree = createTree();\n        this.updateTree(props.value, props.schema);\n        this.rooted = root(this.tree, BranchedSchemaType);\n    }\n    componentDidMount() {\n        this.tree\n            .select('value')\n            .on('update', (event: { data: { currentData: {} } }) => {\n                if (this.event) {\n                    this.props.onChange(\n                        event.data.currentData,\n                        validate(\n                            event.data.currentData,\n                            this.tree.get('schema'),\n                            event.data.currentData\n                        ).errors\n                    )\n                }\n            }\n            );\n    }\n\n    componentWillReceiveProps(nextProps: Props) {\n        if (\n            nextProps.value === this.tree.get('value') &&\n            nextProps.schema === this.props.schema\n        ) {\n            return;\n        }\n        this.updateTree(nextProps.value, nextProps.schema);\n    }\n    componentWillUnmount() {\n        this.tree.release();\n    }\n    shouldComponentUpdate() {\n        return false;\n    }\n    getValue() {\n        return this.tree.get('value');\n    }\n    updateTree(value?: {}, schema?: Schema) {\n        this.event = false;\n        this.tree.set('value', value);\n        this.tree.set('schema', schema);\n        this.tree.set('status', {});\n        this.tree.commit();\n        this.event = true;\n    }\n    validate() {\n        const validationResult = validate(\n            this.tree.get('value'),\n            this.tree.get('schema'),\n            this.tree.get('value')\n        );\n        setValidationErrors(this.tree, [], validationResult.errors);\n        return validationResult.errors;\n    }\n    render() {\n        const Rooted = this.rooted;\n        return <Rooted onChange={noop} path={[]} />;\n    }\n}\n\nexport default Container;\n"],"names":["schema","value","status","undefinedWidgetFactory","DefaultWidget","Object","assign","view","children","editKey","path","onChange","onChildAdd","onChildRemove","addKey","removeKey","alterKey","errorMessage","type","defaultWidget","Array","isArray","find","React.createElement","EMPTYOBJECT","customValidator","attributes","errored","formValue","validate","STATUS","STATE","ERRORS","NO_ERRORS","concat","select","length","get","splice","set","forEach","property","push","message","setErrors","split","filter","slice","VALUE","setValidationErrors","dispatch","getErrors","getFormValue","errors","index","properties","keys","sort","SchemaType","EMPTY_OBJECT","key","additionalProperties","Widget","renderChildren","ObjectField","StringField","state","boundChange","bind","componentWillReceiveProps","setState","props","isNaN","render","SimpleStringField","React","NumberField","BooleanField","map","items","onChildChange","ArrayField","object","string","number","boolean","array","visible","toString","infer","updatePath","val","updateDefault","notifyDefaultChange","componentDidMount","componentDidUpdate","setDefaultValue","update","UndefinedField","Fields","fromDefaultValue","branch","tree","createTree","updateTree","rooted","root","BranchedSchemaType","on","event","data","currentData","componentWillUnmount","release","shouldComponentUpdate","getValue","commit","noop","Container"],"mappings":"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"}