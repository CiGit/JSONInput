{"version":3,"file":"index.es2015.js","sources":["../src/Store/index.js","../src/Comps/Views/undefinedWidgetFactory.js","../src/Comps/Decorators/labeled.js","../src/Comps/Views/Input.js","../src/Comps/Views/TextWidget.js","../src/Comps/Views/ArrowNumberWidget.js","../src/Comps/Views/CheckboxWidget.js","../src/Comps/Views/ArrayWidget.js","../src/Comps/Views/ObjectWidget.js","../src/Comps/Views/SelectWidget.js","../src/Comps/Views/index.js","../src/Comps/Views/Widget.js","../src/Utils/customValidator.js","../src/Comps/Decorators/validator.js","../src/Comps/Fields/Object.js","../src/Comps/Fields/String.js","../src/Comps/Fields/Number.js","../src/Comps/Fields/Boolean.js","../src/Comps/Fields/Array.js","../src/Comps/Fields/index.js","../src/Comps/Decorators/visible.js","../src/Comps/Fields/Undefined.js","../src/Utils/infer.js","../src/Comps/Decorators/inference.js","../src/Comps/Decorators/fromDefaultValue.js","../src/Comps/SchemaType.js","../src/Store/actions.js","../src/Comps/Container.js"],"sourcesContent":["// @flow\nimport Baobab from 'baobab';\n\nconst createTree = () => new Baobab({\n    schema: {},\n    value: {},\n    status: {}\n});\n\nexport default createTree;\n","// @flow\nimport React from 'react';\n\nfunction undefinedWidgetFactory(\n    type: string\n): (...props: mixed[]) => React$Element<*> {\n    return function UndefinedWidget() {\n        return (\n            <span>\n                {`Widget for '${type}' was not defined`}\n            </span>\n        );\n    };\n}\n\nexport default undefinedWidgetFactory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction labeled(Comp) {\n    function Label(props) {\n        const required = props.schema.required;\n        const requiredClassName = required ? 'required' : '';\n        return (\n            <div>\n                <label //eslint-disable-line\n                    className={`${props.schema.type}Field ${requiredClassName}`}\n                >\n                    <span className=\"title\">{props.view.title || props.editKey}</span>\n                    <Comp {...props} />\n                    <span>{props.view.description}</span>\n                    <span>{props.errorMessage}</span>\n                </label>\n            </div>\n        );\n    }\n\n    Label.propTypes = {\n        schema: PropTypes.shape({\n            type: PropTypes.oneOfType([\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n                PropTypes.arrayOf(\n                    PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n                )\n            ]).isRequired,\n            required: PropTypes.bool,\n            description: PropTypes.string\n        }).isRequired,\n        editKey: PropTypes.string,\n        view: PropTypes.shape({\n            title: PropTypes.string,\n            description: PropTypes.string\n        }).isRequired,\n        errorMessage: PropTypes.arrayOf(PropTypes.string)\n    };\n    Label.defaultProps = {\n        editKey: '',\n        errorMessage: []\n    };\n    return Label;\n}\n\nexport default labeled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction onInputChange(func) {\n    return function onChange(event) {\n        if (event.target.type === 'checkbox') {\n            func(event.target.checked);\n        } else {\n            func(event.target.value);\n        }\n    };\n}\n\nfunction Input(props) {\n    return (\n        <input\n            type={props.type}\n            placeholder={props.schema.placeholder}\n            value={props.value || ''}\n            className={props.className}\n            onChange={onInputChange(props.onChange)}\n            checked={props.checked}\n        />\n    );\n}\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool,\n    value: PropTypes.any, // eslint-disable-line\n    schema: PropTypes.shape({\n        placeholder: PropTypes.string\n    }).isRequired\n};\nInput.defaultProps = {\n    className: undefined,\n    checked: false\n};\nexport default Input;\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction TextWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"string\"\n        />\n    );\n}\n\nexport default labeled(TextWidget);\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction ArrowNumberWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n        />\n    );\n}\n\nexport default labeled(ArrowNumberWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction CheckboxWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"checkbox\"\n            checked={props.value}\n        />\n    );\n}\n\nCheckboxWidget.propTypes = {\n    value: PropTypes.bool\n};\nCheckboxWidget.defaultProps = { value: false };\n\nexport default labeled(CheckboxWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ArrayWidget(props) {\n    function renderChild(child, index) {\n        return (\n            <div>\n                <button\n                    onClick={function remove() {\n                        props.onChildRemove(index);\n                    }}\n                >\n                    -\n                </button>\n                {child}\n            </div>\n        );\n    }\n\n    const children = React.Children.map(props.children, renderChild);\n    return (\n        <div>\n            <div>\n                {children}\n            </div>\n            <button onClick={props.onChildAdd}>+</button>\n        </div>\n    );\n}\n\nArrayWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired,\n    onChildRemove: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n    onChildAdd: PropTypes.func.isRequired\n};\nexport default labeled(ArrayWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ObjectWidget(props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    );\n}\n\nObjectWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\n\nexport default labeled(ObjectWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectWidget({ view, value, onChange }) {\n    const choices = view.choices.map(c => (\n        <option\n            key={c.value}\n            value={c.value}\n        >\n            {c.label}\n        </option>\n    ));\n    return (\n        <select value={value} onChange={e => onChange(e.target.value)}>\n            {choices}\n        </select>\n    );\n}\nSelectWidget.propTypes = {\n    view: PropTypes.shape({\n        choices: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.any,\n            label: PropTypes.string.isRequired\n        })).isRequired\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line\n    onChange: PropTypes.func.isRequired\n};\nexport default SelectWidget;\n","// @flow\nimport undefinedWidgetFactory from './undefinedWidgetFactory';\nimport TextWidget from './TextWidget';\nimport ArrowNumberWidget from './ArrowNumberWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport ArrayWidget from './ArrayWidget';\nimport ObjectWidget from './ObjectWidget';\nimport SelectWidget from './SelectWidget';\n\nimport type { WidgetProp } from '../../types.js.flow';\n\ntype WidgetMap = {\n    [string]:\n        | Class<React$Component<*, WidgetProp, *>>\n        | ((props: WidgetProp) => React$Element<*>)\n};\nlet DefaultWidget: WidgetMap = {\n    string: TextWidget,\n    number: TextWidget,\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: ObjectWidget,\n    arrowNumber: ArrowNumberWidget,\n    select: SelectWidget\n};\n\nfunction defaultWidget(type: string) {\n    return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj: WidgetMap) {\n    DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets, undefinedWidgetFactory };\n","// @flow\nimport React from 'react';\nimport { defaultWidget } from './index';\n\nimport type { Schema, WidgetProp } from '../../types.js.flow';\n\ntype Props = {\n    value: mixed,\n    onChange: (value: any) => void,\n    schema: Schema,\n    editKey: string,\n    path: string[],\n    children?: React$Element<*>,\n    addKey?: (key: string, value: mixed) => void,\n    removeKey?: (key: string) => void,\n    alterKey?: (key: string, newKey: string) => void,\n    onChildAdd?: () => void,\n    onChildRemove?: (index: number) => void,\n    errorMessage?: string\n};\n\nconst EMPTYOBJECT = {};\nfunction Widget(props: Props): React$Element<WidgetProp> {\n    const {\n        value,\n        schema,\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage\n    } = props;\n    const forwardProps = {\n        value,\n        schema,\n        children,\n        editKey,\n        path,\n        onChange,\n        onChildAdd,\n        onChildRemove,\n        addKey,\n        removeKey,\n        alterKey,\n        errorMessage\n    };\n    const { view } = schema;\n    if (view) {\n        const { type } = view;\n        if (typeof type === 'string') {\n            const Wdgt = defaultWidget(type);\n            return <Wdgt {...forwardProps} view={view} />;\n        }\n        if (typeof type === 'function') {\n            const Type = type;\n            return <Type {...forwardProps} view={view} />;\n        }\n    }\n    let renderType = Array.isArray(schema.type)\n        ? schema.type.find(t => t !== 'null')\n        : schema.type;\n    if (renderType === undefined) {\n        renderType = 'undefinedType';\n    }\n    const Wdgt = defaultWidget(renderType);\n    return <Wdgt {...forwardProps} view={view || EMPTYOBJECT} />;\n}\n\nexport default Widget;\n","// @flow\nimport jsonschema, { Validator } from 'jsonschema';\n\nimport type { Schema } from '../types.js.flow';\n\ntype ValidationError = {\n    instance: mixed,\n    message: string,\n    property: string\n};\ntype ValidatorResult = {\n    errors: ValidationError[]\n};\nconst customValidator = new Validator();\ncustomValidator.attributes.errored = function validateErrored(\n    instance,\n    schema,\n    options\n) {\n    if (typeof schema.errored !== 'function') {\n        throw new jsonschema.SchemaError('\"errored\" expects a function');\n    }\n    const msg = schema.errored(instance, options.formValue);\n    if (msg) {\n        return msg;\n    }\n    return undefined;\n};\nfunction validate(\n    value: mixed,\n    schema: Schema,\n    formValue: mixed\n): ValidatorResult {\n    return customValidator.validate(value, schema, {\n        formValue\n    });\n}\n\nexport default validate;\n","// @flow\nimport React from 'react';\nimport validate from './../../Utils/customValidator';\nimport type { Schema, Action } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema,\n    value?: mixed,\n    actions: {\n        [string]: Action,\n        getFormValue: Action,\n        getErrors: (string[]) => string[]\n    },\n    path: string[],\n    onChange: mixed => void\n};\n\nfunction validated<P: Props>(\n    Comp: Class<React.Component<*, *, *>> | ((*) => ?React.Element<*>)\n) {\n    function Validator(props: P) {\n        function onChange(val: mixed): void {\n            const validation = validate(\n                val,\n                props.schema,\n                props.actions.getFormValue()\n            );\n            const err = validation.errors.map(error => error.message);\n            props.onChange(val, err);\n        }\n\n        return (\n            <Comp\n                {...props}\n                errorMessage={props.actions.getErrors(props.path)}\n                onChange={onChange}\n            />\n        );\n    }\n    return Validator;\n}\n\nexport default validated;\n","/* @flow */\nimport React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nimport type { Schema, Action } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema & {\n        properties?: { [property: string]: Schema },\n        defaultProperties?: Schema\n    },\n    status: { [string | number]: {} },\n    editKey: string,\n    value: { [key: string]: mixed },\n    actions: {\n        [string]: Action,\n        deleteSchema: Action\n    },\n    path: Array<string>,\n    onChange: ({}) => void\n};\nconst EMPTY_OBJECT = {};\n\nfunction renderChildren(props: Props): [] {\n    const children = [];\n    const properties: { [key: string]: Schema } = props.schema.properties || {};\n    const value: { [key: string]: mixed } = props.value || {};\n    // Holds schema properties and value properties missing from schema.\n    const mergedProperties: Array<string> = Object.keys(properties);\n\n    Object.keys(value).forEach(v => {\n        if (v in properties) {\n            return;\n        }\n        mergedProperties.push(v);\n    });\n    function indexFor(property: string): number {\n        if (\n            properties[property] &&\n            typeof properties[property].index === 'number'\n        ) {\n            return properties[property].index;\n        }\n        return 0;\n    }\n    // Index based sorting\n    function sortProperties(a: string, b: string): number {\n        return indexFor(a) - indexFor(b);\n    }\n\n    mergedProperties.sort(sortProperties);\n    for (let i: number = 0; i < mergedProperties.length; i += 1) {\n        const prop: string = mergedProperties[i];\n        if (prop in properties) {\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={properties[prop]}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        } else {\n            const schema = props.schema.defaultProperties;\n            if (schema) {\n                props.actions.updateSchema(props.path.concat([prop]), schema);\n            }\n            children.push(\n                <SchemaType\n                    {...props}\n                    status={props.status[prop] || EMPTY_OBJECT}\n                    schema={schema}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        }\n    }\n    return children;\n}\n\nfunction ObjectField(props: Props) {\n    function addKey(key: string, value: mixed): void {\n        props.onChange(\n            Object.assign({}, props.value, {\n                [key]: value\n            })\n        );\n    }\n\n    function removeKey(key: string): void {\n        const value: {} = Object.assign({}, props.value);\n        delete value[key];\n        props.actions.deleteSchema(props.path.concat([key]), {});\n        props.onChange(value);\n    }\n\n    function alterKey(key: string, newKey: string): void {\n        const value: {} = {};\n        Object.keys(props.value).forEach(p => {\n            if (p !== key) {\n                value[p] = props.value[p];\n            } else {\n                value[newKey] = props.value[p];\n            }\n        });\n        props.onChange(value);\n    }\n    return (\n        <Widget\n            {...props}\n            addKey={addKey}\n            removeKey={removeKey}\n            alterKey={alterKey}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nObjectField.defaultProps = {\n    value: {}\n};\n\nexport default validator(ObjectField);\n","/* @flow */\nimport React from 'react';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nimport type { Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' },\n    value?: number | string,\n    editKey: string,\n    path: string[],\n    onChange: (value: string | number) => void\n};\n\nfunction StringField(props: Props) {\n    const val = props.value !== undefined && props.value !== null\n        ? String(props.value)\n        : props.value;\n    return <Widget {...props} value={val} />;\n}\n\nexport { StringField as SimpleStringField };\nexport default validator(StringField);\n","/* @flow */\nimport React from 'react';\nimport validator from '../Decorators/validator';\nimport { SimpleStringField } from './String';\nimport type { Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema & { type: 'number' | 'string' },\n    value?: number,\n    editKey: string,\n    path: string[],\n    onChange: (string | void | number) => void,\n    errorMessage: string[]\n};\n\nclass NumberField\n    extends React.Component<void, Props, { value?: string | void | number }> {\n    state: {\n        value?: string | void | number\n    };\n    boundChange: (value: number | string) => void;\n    props: Props;\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            value: props.value\n        };\n        this.boundChange = this.onChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        // if numerical values differ: update\n        if (Number(this.state.value) !== Number(nextProps.value)) {\n            this.setState({\n                value: nextProps.value\n            });\n        }\n    }\n    onChange(val) {\n        const value: string | void | number = val === '' ? undefined : val;\n        const numVal = Number(value);\n        this.setState(\n            {\n                value\n            },\n            () => this.props.onChange(isNaN(numVal) ? value : numVal)\n        );\n    }\n    render() {\n        return (\n            <SimpleStringField\n                {...this.props}\n                value={this.state.value}\n                onChange={this.boundChange}\n            />\n        );\n    }\n}\n\nexport default validator(NumberField);\n","// @flow\nimport React from 'react';\nimport Widget from '../Views/Widget';\nimport validator from './../Decorators/validator';\n\nimport type { Schema } from '../../types.js.flow';\n\nfunction BooleanField(\n    props: {\n        schema: Schema & { type: 'boolean' },\n        editKey: string,\n        path: string[],\n        value: boolean,\n        onChange: (value: boolean) => void\n    }\n) {\n    return <Widget {...props} />;\n}\n\nexport default validator(BooleanField);\n","// @flow\nimport React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nimport type { Schema, Action } from '../../types.js.flow';\n\ntype Props = {\n    onChange: (mixed[]) => void,\n    schema: Schema & {\n        items?: Schema[],\n        value?: mixed\n    },\n    value?: mixed[],\n    editKey: string,\n    status: { [string | number]: {} },\n    actions: {\n        [string]: Action,\n        deleteSchema: Action\n    },\n    path: string[]\n};\nconst EMPTY_OBJECT = {};\n\nfunction onChildChange(index: number, props: Props) {\n    return function onChange(val: mixed) {\n        const { value } = props;\n        if (value) {\n            props.onChange(\n                value.map((e, i) => {\n                    if (+i !== +index) {\n                        return e;\n                    }\n                    return val;\n                })\n            );\n        } else {\n            props.onChange([val]);\n        }\n    };\n}\n\nfunction onChildRemove(props: Props) {\n    return function onRemove(index: number) {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n    };\n}\n\nfunction onChildAdd(props: Props) {\n    return function onAdd() {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.concat([undefined]));\n    };\n}\n\nfunction renderChildren(props: Props) {\n    const { value, schema: { value: defaultValue, items } } = props;\n    let valueItems: mixed[];\n    if (value) {\n        valueItems = value;\n    } else if (defaultValue) {\n        valueItems = defaultValue;\n    } else {\n        valueItems = [];\n    }\n    const children = [];\n    valueItems.forEach((val, i) =>\n        children.push(\n            <SchemaType\n                {...props}\n                schema={Array.isArray(items) ? items[i] || {} : items}\n                value={val}\n                editKey={String(i)}\n                status={props.status[String(i)] || EMPTY_OBJECT}\n                key={i}\n                onChange={onChildChange(i, props)}\n            />\n        )\n    );\n    return children;\n}\n\nfunction ArrayField(props: Props) {\n    return (\n        <Widget\n            {...props}\n            onChildAdd={onChildAdd(props)}\n            onChildRemove={onChildRemove(props)}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default validator(ArrayField);\n","// @flow\nimport ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n    object: ObjectField,\n    string: StringField,\n    number: NumberField,\n    boolean: BooleanField,\n    array: ArrayField\n};\n","// @flow\nimport React from 'react';\n\nimport type { Action, Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema,\n    value: mixed,\n    actions: {\n        [string]: Action,\n        getFormValue: Action\n    }\n};\nfunction visibility<P: Props>(\n    Comp: Class<React.Component<*, P, *>>\n): (props: P) => ?React.Element<P> {\n    return function Visible(props: P) {\n        const { schema: { visible }, value } = props;\n        if (visible && !visible(value, props.actions.getFormValue())) {\n            return null;\n        }\n        return <Comp {...props} />;\n    };\n}\n\nexport default visibility;\n","/* @flow */\nimport React from 'react';\n\nimport type { Schema } from '../../types.js.flow';\n\ntype Props = {\n    schema: Schema,\n    path: string[]\n};\n\nfunction Undefined(props: Props) {\n    return (\n        <span>{`Undefined field type \"${props.schema.type.toString()}\", [${props.path.toString()}]`}</span>\n    );\n}\n\nexport default Undefined;\n","// @flow\nexport default function infer(value: mixed) {\n    switch (typeof value) {\n        case 'number':\n            return 'number';\n        case 'string':\n            return 'string';\n        case 'boolean':\n            return 'boolean';\n        case 'object':\n            return Array.isArray(value) ? 'array' : 'object';\n        default:\n            return 'string';\n    }\n}\n","// @flow\nimport React from 'react';\nimport infer from './../../Utils/infer';\nimport type { Schema, Action } from '../../types.js.flow';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath: string[], editKey?: string): string[] {\n    if (editKey) {\n        return currentPath.concat([editKey]);\n    }\n    return currentPath;\n}\ntype Props = {\n    path: string[],\n    editKey?: string,\n    value?: mixed,\n    schema: Schema,\n    actions: {\n        [string]: Action,\n        updateSchema: Action\n    }\n};\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param {React.Component} Comp component to decorate.\n * @return {React.Component} the decorated component.\n */\nfunction inference<P: Props>(\n    Comp: Class<React.Component<*, P, *>> | ((props: P) => ?React.Element<*>)\n): * {\n    class Infer extends React.Component<void, P, { schema: Schema }> {\n        state: {\n            schema: Schema\n        };\n        constructor(props: P) {\n            super(props);\n            const { schema } = props;\n            let inferedSchema = schema;\n            if (!inferedSchema || !('type' in inferedSchema)) {\n                inferedSchema = { type: infer(props.value) };\n            }\n            this.state = { schema: inferedSchema };\n        }\n        componentWillReceiveProps(nextProps: P) {\n            if (this.props.schema !== nextProps.schema) {\n                let inferedSchema = nextProps.schema;\n                if (!inferedSchema || !('type' in inferedSchema)) {\n                    inferedSchema = { type: infer(nextProps.value) };\n                }\n                this.setState(() => ({ schema: inferedSchema }));\n            }\n        }\n        render() {\n            const path = updatePath(this.props.path, this.props.editKey);\n            return (\n                <Comp {...this.props} path={path} schema={this.state.schema} />\n            );\n        }\n    }\n    return Infer;\n}\n\nexport default inference;\n","// @flow\nimport React from 'react';\n\nimport type { Action, Schema } from '../../types.js.flow';\n\nfunction updateDefault({ value, schema: { value: defaultValue } }) {\n    const val = value !== undefined ? value : defaultValue;\n    return val;\n}\ntype Props = {\n    actions: { [string]: Action, setDefaultValue: Action },\n    editKey?: string,\n    path: string[],\n    value?: mixed,\n    schema: Schema\n};\n\nfunction fromDefaultValue<P: Props>(\n    Comp: Class<React.Component<*, P, *>> | ((props: P) => ?React.Element<P>)\n) {\n    class DefaultValue extends React.Component<void, *, *> {\n        state: {\n            val?: mixed\n        };\n        props: P;\n        constructor(props: P) {\n            super(props);\n            this.state = { val: updateDefault(props) };\n        }\n        componentDidMount() {\n            this.notifyDefaultChange();\n        }\n        componentWillReceiveProps(nextProps: P) {\n            if (nextProps.schema !== this.props.schema) {\n                this.setState(\n                    { val: updateDefault(nextProps) },\n                    this.notifyDefaultChange.bind(this)\n                );\n            } else {\n                this.setState({ val: nextProps.value });\n            }\n        }\n        notifyDefaultChange() {\n            if (this.props.value !== this.state.val) {\n                this.props.actions.setDefaultValue(\n                    this.props.path,\n                    this.state.val\n                );\n            }\n        }\n        render() {\n            return <Comp {...this.props} value={this.state.val} />;\n        }\n    }\n\n    return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","/* @flow */\nimport React from 'react';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\nimport fromDefaultValue from './Decorators/fromDefaultValue';\n\nimport type { Schema, Action } from '../types.js.flow';\n\n/**\n * bind function callback with its path\n * @param {function(Array<String>)} func callback function to bind\n * @param {Array<string>} path the value's path to act on\n */\nfunction doAction(\n    func: (string[], ...args: mixed[]) => mixed,\n    path: string[]\n): (...mixed[]) => void {\n    return function action(...args) {\n        func(path, ...args);\n    };\n}\n\ntype SchemaProps = {\n    schema: Schema,\n    status: { [string | number]: {} },\n    path: string[],\n    actions: { [func: string]: Action, update: Action },\n    editKey?: string,\n    value: ?mixed\n};\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType extends React.Component<*, SchemaProps, *> {\n    onChange: mixed => void;\n    constructor(props: SchemaProps) {\n        super(props);\n        this.onChange = doAction(props.actions.update, props.path);\n    }\n    shouldComponentUpdate(props: SchemaProps) {\n        const { editKey, schema, value, status } = this.props;\n        return !(editKey === props.editKey &&\n            schema === props.schema &&\n            value === props.value &&\n            status === props.status);\n    }\n    render() {\n        const { schema: { type } } = this.props;\n        const renderType = Array.isArray(type)\n            ? type.find(t => t !== 'null')\n            : type;\n        let Type;\n        if (renderType == null || renderType === 'null') {\n            Type = UndefinedField;\n        } else {\n            Type = Fields[renderType];\n        }\n        return <Type {...this.props} onChange={this.onChange} />;\n    }\n}\nSchemaType.defaultProps = {\n    path: []\n};\n\nexport default inference(fromDefaultValue(visible(SchemaType)));\n","const VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = 'state';\nconst ERRORS = 'errors';\nconst NOERRORS = [];\n\nexport function setErrors(tree, path, errors) {\n    const errorPath = [STATUS].concat(path).concat([ERRORS]);\n    const errorsCursor = tree.select(errorPath);\n    if (errors && errors.length && Array.isArray(errorsCursor.get())) {\n        errorsCursor.splice([0, errorsCursor.get().length]);\n        errorsCursor.concat(errors || []);\n    } else {\n        errorsCursor.set(errors || NOERRORS);\n    }\n}\n\n/**\n * Update a value in the tree\n *\n * @param {Baobab} tree the tree\n * @param {Array<string>} path path's value to update\n * @param value value to set\n * @param {Array<string>} errors errors relative to the value\n */\nexport function update(tree, path, value, errors) {\n    const statusPath = [STATUS].concat(path);\n    tree.set([VALUE].concat(path), value);\n    tree.set(statusPath.concat([STATE]), 'dirty');\n    setErrors(tree, path, errors);\n}\n\nexport function setDefaultValue(tree, path, value) {\n    tree.set([VALUE].concat(path), value);\n    tree.set([STATUS].concat(path).concat([STATE]), 'pristine');\n}\n\nexport function getStatus(tree, path) {\n    return tree.get([STATUS].concat(path).concat([STATE]));\n}\n\nexport function getErrors(tree, path) {\n    return tree.get([STATUS].concat(path).concat([ERRORS])) || NOERRORS;\n}\n\nexport function getFormValue(tree) {\n    return tree.get(VALUE);\n}\n/**\n * handle object's \"properties\" path and array's \"item\" path\n */\nfunction schemaPath(tree, path) {\n    return path.reduce((prev, val) => {\n        if (tree.get(prev).type === 'object') {\n            return prev.concat(['properties', val]);\n        } else if (tree.get(prev).type === 'array') {\n            return prev.concat(['items']);\n        }\n        return prev.concat([val]);\n    }, ['schema']);\n}\nexport function updateSchema(tree, path, value) {\n    const updatedPath = schemaPath(tree, path);\n    tree.set(updatedPath, value);\n}\n\nexport function deleteSchema(tree, path) {\n    const updatedPath = schemaPath(tree, path);\n    tree.unset(updatedPath);\n}\n","// @flow\nimport React from 'react';\nimport { root, branch } from 'baobab-react/higher-order';\nimport createTree from '../Store/index';\nimport SchemaType from './SchemaType';\nimport * as actions from '../Store/actions';\nimport validate from './../Utils/customValidator';\nimport { setDefaultWidgets } from './Views/index';\n\nimport type { Schema, Action } from '../types.js.flow';\n\nconst BranchedSchemaType = branch(\n    {\n        schema: 'schema',\n        status: 'status',\n        value: 'value'\n    },\n    SchemaType\n);\n\ntype Props = {\n    onChange: mixed => any,\n    schema?: Schema,\n    value?: mixed\n};\n\n/**\n * Top Component\n */\nclass Container extends React.Component<void, Props, void> {\n    static setDefaultWidgets: *;\n    tree: any;\n    ACTIONS: { [actionName: string]: Action };\n    rooted: Class<\n        React.Component<\n            void,\n            {\n                onChange: mixed => void,\n                actions: { [actionName: string]: Action },\n                path: string[]\n            },\n            void\n        >\n    >;\n    props: Props;\n\n    constructor(props: Props) {\n        super(props);\n        this.tree = createTree();\n        this.updateTree(props.value, props.schema);\n        // should use dispatcher instead. from baobab-react v2\n        this.ACTIONS = {};\n        Object.keys(actions).forEach(action => {\n            this.ACTIONS[action] = actions[action].bind(this.tree, this.tree);\n        });\n        this.rooted = root(this.tree, BranchedSchemaType);\n    }\n    componentDidMount() {\n        this.tree\n            .select('value')\n            .on('update', event =>\n                this.props.onChange(\n                    event.data.currentData,\n                    validate(\n                        event.data.currentData,\n                        this.tree.get('schema'),\n                        event.data.currentData\n                    ).errors\n                )\n            );\n    }\n    componentWillReceiveProps(nextProps: Props) {\n        if (\n            nextProps.value === this.tree.get('value') &&\n            nextProps.schema === this.props.schema\n        ) {\n            return;\n        }\n        this.updateTree(nextProps.value, nextProps.schema);\n    }\n    componentWillUnmount() {\n        this.tree.release();\n    }\n    getValue() {\n        return this.tree.get('value');\n    }\n    updateTree(value: mixed, schema?: Schema) {\n        this.tree.set('value', value);\n        this.tree.set('schema', schema || {});\n        this.tree.set('status', {});\n        this.tree.commit();\n    }\n    validate() {\n        const validationResult = validate(\n            this.tree.get('value'),\n            this.tree.get('schema'),\n            this.tree.get('value')\n        );\n        const { setErrors } = this.ACTIONS;\n        const errorMap = new Map();\n        // Collect each error associated with a given path\n        validationResult.errors.forEach(error => {\n            const errors = errorMap.get(error.property) || [];\n            errors.push(error.message); // Add new error\n            errorMap.set(error.property, errors);\n        });\n        errorMap.forEach((value, key) => {\n            setErrors(\n                key.split(/\\.|\\[|\\]/).filter(x => x !== '').slice(1),\n                value\n            );\n        });\n        return validationResult.errors;\n    }\n    render() {\n        const Rooted = this.rooted;\n        return (\n            <Rooted\n                onChange={this.props.onChange}\n                path={[]}\n                actions={this.ACTIONS}\n            />\n        );\n    }\n}\n\nContainer.setDefaultWidgets = setDefaultWidgets;\nexport default Container;\n"],"names":["schema","value","status","type","props","required","React","className","requiredClassName","view","title","editKey","a","description","errorMessage","defaultProps","Label","target","func","event","checked","placeholder","onChange","onInputChange","Input","TextWidget","ArrowNumberWidget","CheckboxWidget","Children","map","children","onClick","onChildRemove","index","child","onChildAdd","ArrayWidget","ObjectWidget","choices","key","c","label","e","string","number","boolean","array","object","arrowNumber","select","SelectWidget","undefinedWidgetFactory","DefaultWidget","Object","assign","obj","path","addKey","removeKey","alterKey","defaultWidget","s","forwardProps","Array","isArray","find","renderType","r","EMPTYOBJECT","customValidator","attributes","errored","SchemaError","instance","options","formValue","msg","validate","actions","getErrors","val","getFormValue","validation","errors","message","err","property","properties","keys","forEach","v","mergedProperties","push","sort","indexFor","b","i","length","prop","SchemaType","EMPTY_OBJECT","defaultProperties","updateSchema","concat","Widget","deleteSchema","p","newKey","renderChildren","ObjectField","StringField","state","d","boundChange","bind","componentWillReceiveProps","nextProps","setState","isNaN","numVal","render","SimpleStringField","Component","NumberField","BooleanField","oldValue","filter","items","defaultValue","onChildChange","ArrayField","visible","toString","currentPath","infer","f","inferedSchema","updatePath","updateDefault","componentDidMount","notifyDefaultChange","setDefaultValue","args","doAction","update","shouldComponentUpdate","UndefinedField","Fields","fromDefaultValue","STATUS","STATE","ERRORS","NOERRORS","tree","errorPath","errorsCursor","get","splice","set","VALUE","statusPath","setErrors","reduce","prev","schemaPath","updatedPath","unset","branch","Container","createTree","updateTree","ACTIONS","action","rooted","root","BranchedSchemaType","on","data","currentData","componentWillUnmount","release","getValue","commit","errorMap","error","split","slice","validationResult","setDefaultWidgets"],"mappings":"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"}