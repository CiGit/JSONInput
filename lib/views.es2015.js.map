{"version":3,"file":"views.es2015.js","sources":["../src/Comps/Decorators/labeled.js","../src/Comps/Views/Input.js","../src/Comps/Views/TextWidget.js","../src/Comps/Views/ArrowNumberWidget.js","../src/Comps/Views/CheckboxWidget.js","../src/Comps/Views/ArrayWidget.js","../src/Comps/Views/SelectWidget.js","../src/Comps/Views/HashmapWidget.tsx","../src/Comps/Views/index.ts"],"sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction labeled(Comp) {\n    function Label(props) {\n        const required = props.schema.required;\n        const requiredClassName = required ? 'required' : '';\n        return (\n            <div>\n                <label //eslint-disable-line\n                    className={`${props.schema.type}Field ${requiredClassName}`}\n                >\n                    <span className=\"title\">\n                        {props.view.title || props.editKey}\n                    </span>\n                    <Comp {...props} />\n                    <span>{props.view.description}</span>\n                    <span>{props.errorMessage}</span>\n                </label>\n            </div>\n        );\n    }\n\n    Label.propTypes = {\n        schema: PropTypes.shape({\n            type: PropTypes.oneOfType([\n                PropTypes.oneOf([\n                    'object',\n                    'string',\n                    'number',\n                    'array',\n                    'boolean'\n                ]),\n                PropTypes.arrayOf(\n                    PropTypes.oneOf([\n                        'object',\n                        'string',\n                        'number',\n                        'array',\n                        'boolean',\n                        'null'\n                    ])\n                )\n            ]).isRequired,\n            required: PropTypes.bool,\n            description: PropTypes.string\n        }).isRequired,\n        editKey: PropTypes.string,\n        view: PropTypes.shape({\n            title: PropTypes.string,\n            description: PropTypes.string\n        }).isRequired,\n        errorMessage: PropTypes.arrayOf(PropTypes.string)\n    };\n    Label.defaultProps = {\n        editKey: '',\n        errorMessage: []\n    };\n    return Label;\n}\n\nexport default labeled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction onInputChange(func) {\n    return function onChange(event) {\n        if (event.target.type === 'checkbox') {\n            func(event.target.checked);\n        } else {\n            func(event.target.value);\n        }\n    };\n}\n\nfunction Input(props) {\n    return (\n        <input\n            type={props.type}\n            placeholder={props.schema.placeholder}\n            value={props.value || ''}\n            className={props.className}\n            onChange={onInputChange(props.onChange)}\n            checked={props.checked}\n        />\n    );\n}\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool,\n    value: PropTypes.any, // eslint-disable-line\n    schema: PropTypes.shape({\n        placeholder: PropTypes.string\n    }).isRequired\n};\nInput.defaultProps = {\n    className: undefined,\n    checked: false\n};\nexport default Input;\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction TextWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"string\"\n        />\n    );\n}\n\nexport default labeled(TextWidget);\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction ArrowNumberWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n        />\n    );\n}\n\nexport default labeled(ArrowNumberWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction CheckboxWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"checkbox\"\n            checked={props.value}\n        />\n    );\n}\n\nCheckboxWidget.propTypes = {\n    value: PropTypes.bool\n};\nCheckboxWidget.defaultProps = { value: false };\n\nexport default labeled(CheckboxWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ArrayWidget(props) {\n    function renderChild(child, index) {\n        return (\n            <div>\n                <button\n                    onClick={function remove() {\n                        props.onChildRemove(index);\n                    }}\n                >\n                    -\n                </button>\n                {child}\n            </div>\n        );\n    }\n\n    const children = React.Children.map(props.children, renderChild);\n    return (\n        <div>\n            <div>\n                {children}\n            </div>\n            <button onClick={() => props.onChildAdd()}>+</button>\n        </div>\n    );\n}\n\nArrayWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired,\n    onChildRemove: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n    onChildAdd: PropTypes.func.isRequired\n};\nexport default labeled(ArrayWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectWidget(props) {\n    const { view, value, onChange } = props;\n    const choices = view.choices.map(c => (\n        <option key={c.value} value={c.value}>\n            {c.label}\n        </option>\n    ));\n    return (\n        <select value={value} onChange={e => onChange(e.target.value)}>\n            {choices}\n        </select>\n    );\n}\nSelectWidget.propTypes = {\n    view: PropTypes.shape({\n        choices: PropTypes.arrayOf(\n            PropTypes.shape({\n                value: PropTypes.any,\n                label: PropTypes.string.isRequired\n            })\n        ).isRequired\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line\n    onChange: PropTypes.func.isRequired\n};\nexport default SelectWidget;\n","import * as React from 'react';\nimport { WidgetProps } from '../../../typings/types';\n\nfunction Hashmap(props: WidgetProps.ObjectProps) {\n    return (\n        <div>\n            {React.Children.map(props.children, (child: any, index) => {\n                return (\n                    <div>\n                        <input\n                            value={child.props.editKey}\n                            onChange={e =>\n                                props.alterKey(\n                                    child.props.editKey,\n                                    e.target.value\n                                )}\n                        />\n                        {child}\n                    </div>\n                );\n            })}\n            <button onClick={() => props.addKey('', '')}>+</button>\n        </div>\n    );\n}\n\nexport default Hashmap;\n","import TextWidget from './TextWidget';\nimport ArrowNumberWidget from './ArrowNumberWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport ArrayWidget from './ArrayWidget';\nimport ObjectWidget from './ObjectWidget';\nimport SelectWidget from './SelectWidget';\nimport HashmapWidget from './HashmapWidget';\n\nexport default {\n    string: TextWidget,\n    number: TextWidget,\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: ObjectWidget,\n    arrowNumber: ArrowNumberWidget,\n    select: SelectWidget,\n    hashmap: HashmapWidget,\n};\n"],"names":["schema","required","React","className","type","view","title","editKey","description","errorMessage","defaultProps","target","checked","value","placeholder","onChange","onInputChange","Input","TextWidget","ArrowNumberWidget","CheckboxWidget","Children","map","children","onClick","onChildRemove","onChildAdd","ArrayWidget","key","label","React.createElement","props","alterKey","addKey","string","number","boolean","array","object","ObjectWidget","arrowNumber","select","SelectWidget","hashmap","HashmapWidget"],"mappings":"4EAGA,gBAAA,GAAuB,CACnB,aAAsB,CAClB,MAAiB,EAAMA,MAAN,CAAaC,QAA9B,CACM,EAAoB,EAAW,UAAX,CAAwB,EADlD,CAEA,+CAEQC,4BAAAA,QAAAA,EACIC,UAAc,EAAMH,MAAN,CAAaI,IAAb,SAAA,GADlBF,CAGIA,4BAAAA,OAAAA,EAAMC,UAAU,QAAhBD,CACK,EAAMG,IAAN,CAAWC,KAAX,EAAoB,EAAMC,OAD/BL,CAHJA,CAMIA,4BAAAA,KANJA,CAOIA,4BAAAA,OAAAA,KAAAA,CAAO,EAAMG,IAAN,CAAWG,WAAlBN,CAPJA,CAQIA,4BAAAA,OAAAA,KAAAA,CAAO,EAAMO,YAAbP,CARJA,EAiDZ,UAJMQ,aAAe,CACjBH,QAAS,EADQ,CAEjBE,eAFiB,GAOzB,CC1DA,sBAAA,GAA6B,CACzB,kBAAgC,CACF,eAAhBE,OAAOP,IAAS,CACtB,EAAK,EAAMO,MAAN,CAAaC,OAAlB,CADsB,CAGtB,EAAK,EAAMD,MAAN,CAAaE,KAAlB,CAGX,CAED,eAAA,GAAsB,CAClB,6CAEQT,KAAM,EAAMA,KACZU,YAAa,EAAMd,MAAN,CAAac,YAC1BD,MAAO,EAAMA,KAAN,EAAe,GACtBV,UAAW,EAAMA,UACjBY,SAAUC,cAAc,EAAMD,QAApBC,EACVJ,QAAS,EAAMA,SAe3BK,OAAMP,YAANO,CAAqB,CACjBd,gBADiB,CAEjBS,UAFiB,+qCChCrB,mBAAA,GAA2B,CACvB,oCACKK,qBAEGb,KAAK,WAKjB,0BAAuBc,WAAvB,CCTA,0BAAA,GAAkC,CAC9B,oCACKD,qBAEGb,KAAK,WAKjB,iCAAuBe,kBAAvB,CCRA,uBAAA,GAA+B,CAC3B,oCACKF,qBAEGb,KAAK,WACLQ,QAAS,EAAMC,QAQ3BO,gBAAeV,YAAfU,CAA8B,CAAEP,QAAF,EAE9B,6BAAuBO,eAAvB,CChBA,oBAAA,GAA4B,CAgBxB,MAAiBlB,eAAMmB,QAANnB,CAAeoB,GAAfpB,CAAmB,EAAMqB,QAAzBrB,CAfjB,aAAmC,CAC/B,+CAEQA,4BAAAA,SAAAA,EACIsB,QAAS,UAAkB,CACvB,EAAMC,aAAN,GAFR,EAAAvB,IAAAA,IAYK,CAAAA,CAAjB,CACA,+CAEQA,4BAAAA,MAAAA,KAAAA,IAGAA,4BAAAA,SAAAA,EAAQsB,QAAS,oBAAYE,YAA7B,EAAAxB,IAAAA,EAUZ,2BAAuByB,YAAvB,qQC9BgBC,IAAK,EAAEf,MAAOA,MAAO,EAAEA,OAC1B,EAAEgB,MAFK,GAKhB,8CACYhB,QAAcE,SAAU,qBAAc,EAAEJ,MAAF,CAASE,MAAvD,KAiBR,CCzBA,gBAAA,IACI,gCAESX,SAAeoB,GAAfpB,CAAmB,EAAMqB,QAAzBrB,CAAmC,YAChC,gCAEQ4B,qBAAAA,EACIjB,MAAO,EAAMkB,KAAN,CAAYxB,QACnBQ,SAAU,qBACAiB,SACF,EAAMD,KAAN,CAAYxB,QACZ,EAAEI,MAAF,CAASE,MALrB,EAAAiB,IAHX,CAAA5B,EAeD4B,sBAAAA,EAAQN,QAAS,oBAAYS,OAAO,GAAI,GAAxC,EAAAH,IAAAA,EAKZ,CClBA,UAAe,CACXI,OAAQhB,YADG,CAEXiB,OAAQjB,YAFG,CAGXkB,QAAShB,gBAHE,CAIXiB,MAAOV,aAJI,CAKXW,OAAQC,cALG,CAMXC,YAAarB,mBANF,CAOXsB,OAAQC,YAPG,CAQXC,QAASC,OARE,CAAf"}