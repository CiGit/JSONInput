{"version":3,"file":"index.js","sources":["../src/Store/index.js","../src/Comps/Decorators/fromDefaultValue.js","../src/Comps/Views/undefinedWidgetFactory.js","../src/Comps/Decorators/labeled.js","../src/Comps/Views/Input.js","../src/Comps/Views/TextWidget.js","../src/Comps/Views/ArrowNumberWidget.js","../src/Comps/Views/CheckboxWidget.js","../src/Comps/Views/ArrayWidget.js","../src/Comps/Views/ObjectWidget.js","../src/Comps/Views/SelectWidget.js","../src/Comps/Views/index.js","../src/Comps/Views/Widget.js","../src/Utils/customValidator.js","../src/Comps/Decorators/validator.js","../src/Comps/Fields/Object.js","../src/Comps/Fields/String.js","../src/Comps/Fields/Number.js","../src/Comps/Fields/Boolean.js","../src/Comps/Fields/Array.js","../src/Comps/Fields/index.js","../src/Comps/Decorators/visible.js","../src/Comps/Fields/Undefined.js","../src/Utils/infer.js","../src/Comps/Decorators/inference.js","../src/Comps/SchemaType.js","../src/Store/actions.js","../src/Comps/Container.js","../src/index.js"],"sourcesContent":["import Baobab from 'baobab';\n\nconst createTree = () => new Baobab({\n    schema: {},\n    value: {},\n    status: {}\n});\n\nexport default createTree;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction updateDefault({ value, schema: { value: defaultValue } }) {\n    const val = value !== undefined ? value : defaultValue;\n    return val;\n}\n\nfunction fromDefaultValue(Comp) {\n    class DefaultValue extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = { val: updateDefault(props) };\n        }\n        componentDidMount() {\n            this.notifyDefaultChange();\n        }\n        componentWillReceiveProps(nextProps) {\n            this.setState({ val: updateDefault(nextProps) });\n        }\n        componentDidUpdate() {\n            this.notifyDefaultChange();\n        }\n        notifyDefaultChange() {\n            if (this.props.value !== this.state.val) {\n                this.props.actions.setDefaultValue(this.props.path, this.state.val);\n            }\n        }\n        render() {\n            return (<Comp {...this.props} value={this.state.val} />);\n        }\n    }\n\n    DefaultValue.propTypes = {\n        value: PropTypes.any, // eslint-disable-line\n        schema: PropTypes.shape({ // eslint-disable-line\n            value: PropTypes.any\n        }).isRequired,\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        actions: PropTypes.shape({\n            setDefaultValue: PropTypes.func.isRequired\n        }).isRequired\n    };\n    return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","import React from 'react';\n\nfunction undefinedWidgetFactory(type) {\n    return function UndefinedWidget() {\n        return (\n            <span>\n                {`Widget for '${type}' was not defined`}\n            </span>\n        );\n    };\n}\n\nexport default undefinedWidgetFactory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction labeled(Comp) {\n    function Label(props) {\n        const required = props.schema.required;\n        const requiredClassName = required ? 'required' : '';\n        return (\n            <div>\n                <label //eslint-disable-line\n                    className={`${props.schema.type}Field ${requiredClassName}`}\n                >\n                    <span className=\"title\">{props.view.title || props.editKey}</span>\n                    <Comp {...props} />\n                    <span>{props.view.description}</span>\n                    <span>{props.errorMessage}</span>\n                </label>\n            </div>\n        );\n    }\n\n    Label.propTypes = {\n        schema: PropTypes.shape({\n            type: PropTypes.oneOfType([\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n                PropTypes.arrayOf(\n                    PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n                )\n            ]).isRequired,\n            required: PropTypes.bool,\n            description: PropTypes.string\n        }).isRequired,\n        editKey: PropTypes.string,\n        view: PropTypes.shape({\n            title: PropTypes.string,\n            description: PropTypes.string\n        }).isRequired,\n        errorMessage: PropTypes.arrayOf(PropTypes.string)\n    };\n    Label.defaultProps = {\n        editKey: '',\n        errorMessage: []\n    };\n    return Label;\n}\n\nexport default labeled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction onInputChange(func) {\n    return function onChange(event) {\n        if (event.target.type === 'checkbox') {\n            func(event.target.checked);\n        } else {\n            func(event.target.value);\n        }\n    };\n}\n\nfunction Input(props) {\n    return (\n        <input\n            type={props.type}\n            placeholder={props.schema.placeholder}\n            value={props.value}\n            className={props.className}\n            onChange={onInputChange(props.onChange)}\n            checked={props.checked}\n        />\n    );\n}\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool,\n    value: PropTypes.any, // eslint-disable-line\n    schema: PropTypes.shape({\n        placeholder: PropTypes.string\n    }).isRequired\n};\nInput.defaultProps = {\n    className: undefined,\n    checked: false\n};\nexport default Input;\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction TextWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"string\"\n        />\n    );\n}\n\nexport default labeled(TextWidget);\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction ArrowNumberWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n        />\n    );\n}\n\nexport default labeled(ArrowNumberWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction CheckboxWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"checkbox\"\n            checked={props.value}\n        />\n    );\n}\n\nCheckboxWidget.propTypes = {\n    value: PropTypes.bool\n};\nCheckboxWidget.defaultProps = { value: false };\n\nexport default labeled(CheckboxWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ArrayWidget(props) {\n    function renderChild(child, index) {\n        return (<div>\n            <button onClick={props.onChildRemove(index)}>-</button>\n            {child}\n        </div>);\n    }\n\n    const children = React.Children.map(props.children, renderChild);\n    return (\n        <div>\n            <div>\n                {children}\n            </div>\n            <button onClick={props.onChildAdd}>+</button>\n        </div>\n    );\n}\n\nArrayWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired,\n    onChildRemove: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n    onChildAdd: PropTypes.func.isRequired\n};\nexport default labeled(ArrayWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ObjectWidget(props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    );\n}\n\nObjectWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\n\nexport default labeled(ObjectWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectWidget({ view, value, onChange }) {\n    const choices = view.choices.map(c => (\n        <option\n            key={c.value}\n            value={c.value}\n        >\n            {c.label}\n        </option>\n    ));\n    return (\n        <select value={value} onChange={e => onChange(e.target.value)}>\n            {choices}\n        </select>\n    );\n}\nSelectWidget.propTypes = {\n    view: PropTypes.shape({\n        choices: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.any,\n            label: PropTypes.string.isRequired\n        })).isRequired\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line\n    onChange: PropTypes.func.isRequired\n};\nexport default SelectWidget;\n","import undefinedWidgetFactory from './undefinedWidgetFactory';\nimport TextWidget from './TextWidget';\nimport ArrowNumberWidget from './ArrowNumberWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport ArrayWidget from './ArrayWidget';\nimport ObjectWidget from './ObjectWidget';\nimport SelectWidget from './SelectWidget';\n\nlet DefaultWidget = {\n    string: TextWidget,\n    number: TextWidget,\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: ObjectWidget,\n    arrowNumber: ArrowNumberWidget,\n    select: SelectWidget\n};\n\nfunction defaultWidget(type) {\n    return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj) {\n    DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets, undefinedWidgetFactory };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defaultWidget } from './index';\n\nconst EMPTYOBJECT = {};\nfunction Widget(props) {\n    const { schema } = props;\n    const { view, ...restSchema } = schema;\n    if (view) {\n        const { type } = view;\n        if (typeof type === 'string') {\n            const Wdgt = defaultWidget(type);\n            return (\n                <Wdgt\n                    {...props}\n                    schema={restSchema}\n                    view={view}\n                />\n            );\n        }\n        if (typeof type === 'function') {\n            const Type = type;\n            return (\n                <Type\n                    {...props}\n                    schema={restSchema}\n                    view={view}\n                />\n            );\n        }\n    }\n    const renderType = Array.isArray(schema.type) ?\n        schema.type.find(t => t !== 'null') :\n        schema.type;\n    const Wdgt = defaultWidget(renderType);\n    return (\n        <Wdgt\n            {...props}\n            schema={restSchema}\n            view={view || EMPTYOBJECT}\n        />\n    );\n}\n\nWidget.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.string)\n        ]).isRequired\n    }).isRequired\n};\nexport default Widget;\n","import jsonschema, { Validator } from 'jsonschema';\n\nconst customValidator = new Validator();\ncustomValidator.attributes.errored = function validateErrored(\n    instance,\n    schema,\n    options\n) {\n    if (typeof schema.errored !== 'function') {\n        throw new jsonschema.SchemaError('\"errored\" expects a function');\n    }\n    const msg = schema.errored(instance, options.formValue);\n    if (msg) {\n        return msg;\n    }\n    return undefined;\n};\nfunction validate(value, schema, formValue) {\n    return customValidator.validate(value, schema, {\n        formValue\n    });\n}\n\nexport default validate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validate from './../../Utils/customValidator';\n\nfunction validated(Comp) {\n    function Validator(props) {\n        function onChange(val) {\n            const validation = validate(val, props.schema, props.actions.getFormValue());\n            const err = validation.errors.map(error => error.message);\n            props.onChange(val, err);\n        }\n\n        return (\n            <Comp\n                {...props}\n                errorMessage={props.actions.getErrors(props.path)}\n                onChange={onChange}\n            />\n        );\n    }\n\n    Validator.propTypes = {\n        onChange: PropTypes.func.isRequired,\n        schema: PropTypes.shape({\n            errored: PropTypes.func\n        }).isRequired,\n        value: PropTypes.any, // eslint-disable-line\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        actions: PropTypes.objectOf(PropTypes.func).isRequired\n    };\n    return Validator;\n}\n\nexport default validated;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SchemaType from '../SchemaType';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\n\nfunction renderChildren(props) {\n    const children = [];\n    const properties = props.schema.properties || {};\n    const value = props.value || {};\n    // Holds schema properties and value properties missing from schema.\n    const mergedProperties = Object.keys(properties);\n\n    Object.keys(value).forEach((v) => {\n        if (v in properties) {\n            return;\n        }\n        mergedProperties.push(v);\n    });\n    function indexFor(property) {\n        if (properties[property] && typeof properties[property].index === 'number') {\n            return properties[property].index;\n        }\n        return 0;\n    }\n    // Index based sorting\n    function sortProperties(a, b) {\n        return indexFor(a) - indexFor(b);\n    }\n\n    mergedProperties.sort(sortProperties);\n    for (let i = 0; i < mergedProperties.length; i += 1) {\n        const prop = mergedProperties[i];\n        if (prop in properties) {\n            children.push(\n                <SchemaType\n                    {...props}\n                    schema={properties[prop]}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        } else {\n            const schema = props.schema.defaultProperties;\n            if (schema) {\n                props.actions.updateSchema(props.path.concat([prop]), schema);\n            }\n            children.push(\n                <SchemaType\n                    {...props}\n                    schema={schema}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        }\n    }\n    return children;\n}\n\nfunction ObjectField(props) {\n    function addKey(key, value) {\n        props.onChange(Object.assign({}, props.value, {\n            [key]: value\n        }));\n    }\n\n    function removeKey(key) {\n        const value = Object.assign({}, props.value);\n        delete value[key];\n        props.actions.deleteSchema(props.path.concat([key]), {});\n        props.onChange(value);\n    }\n\n    function alterKey(key, newKey) {\n        const value = {};\n        Object.keys(props.value).forEach((p) => {\n            if (p !== key) {\n                value[p] = props.value[p];\n            } else {\n                value[newKey] = props.value[p];\n            }\n        });\n        props.onChange(value);\n    }\n    return (\n        <Widget\n            {...props}\n            addKey={addKey}\n            removeKey={removeKey}\n            alterKey={alterKey}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nObjectField.propTypes = {\n    schema: PropTypes.shape({ // eslint-disable-line react/no-unused-prop-types\n        properties: PropTypes.object\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    path: PropTypes.arrayOf( // eslint-disable-line react/no-unused-prop-types\n        PropTypes.string\n    ).isRequired,\n    onChange: PropTypes.func.isRequired\n};\nObjectField.defaultProps = {\n    value: {}\n};\n\nexport default validator(fromDefaultValue(ObjectField));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Widget from '../Views/Widget';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport validator from '../Decorators/validator';\n\nfunction StringField(props) {\n    const val = props.value !== undefined && props.value !== null ?\n        String(props.value) :\n        props.value;\n    return (\n        <Widget\n            {...props}\n            value={val}\n        />\n    );\n}\n\nStringField.propTypes = {\n    value: PropTypes.oneOfType([ // eslint-disable-line react/require-default-props\n        PropTypes.number,\n        PropTypes.string\n    ])\n};\nexport { StringField as SimpleStringField };\nexport default validator(fromDefaultValue(StringField));\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validator from '../Decorators/validator';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport { SimpleStringField } from './String';\n\nclass NumberField extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value\n        };\n        this.boundChange = this.onChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        // if numerical values differ: update\n        if (Number(this.state.value) !== Number(nextProps.value)) {\n            this.setState({\n                value: nextProps.value\n            });\n        }\n    }\n    onChange(val) {\n        const value = val === '' ? undefined : val;\n        const numVal = Number(value);\n        this.setState({\n            value\n        }, () => this.props.onChange(isNaN(numVal) ? value : numVal));\n    }\n    render() {\n        return (\n            <SimpleStringField\n                {...this.props}\n                value={this.state.value}\n                onChange={this.boundChange}\n            />\n        );\n    }\n}\nNumberField.propTypes = {\n    value: PropTypes.number, // eslint-disable-line react/require-default-props\n    onChange: PropTypes.func.isRequired\n};\n\nexport default validator(fromDefaultValue(NumberField));\n","import React from 'react';\nimport Widget from '../Views/Widget';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\nimport validator from './../Decorators/validator';\n\nfunction BooleanField(props) {\n    return (<Widget {...props} />);\n}\n\nexport default validator(fromDefaultValue(BooleanField));\n","import React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport fromDefaultValue from '../Decorators/fromDefaultValue';\n\nfunction onChildChange(index, props) {\n    return function onChange(val) {\n        const { value } = props;\n        if (value) {\n            props.onChange(value.map((e, i) => {\n                if (+i !== +index) {\n                    return e;\n                }\n                return val;\n            }));\n        } else {\n            props.onChange([val]);\n        }\n    };\n}\n\nfunction onChildRemove(props) {\n    return function onRemove(index) {\n        return function doRemove() {\n            const oldValue = props.value || [];\n            props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n        };\n    };\n}\n\nfunction onChildAdd(props) {\n    return function onAdd() {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.concat([undefined]));\n    };\n}\n\nfunction renderChildren(props) {\n    const { value, schema: { defaultValue, items } } = props;\n    let valueItems;\n    if (value) {\n        valueItems = value;\n    } else if (defaultValue) {\n        valueItems = defaultValue;\n    } else {\n        valueItems = [];\n    }\n    const children = [];\n    valueItems.forEach((val, i) => children.push(\n        <SchemaType\n            {...props}\n            schema={Array.isArray(items) ? (items[i] || {}) : items}\n            value={val}\n            editKey={String(i)}\n            key={i}\n            onChange={onChildChange(i, props)}\n        />\n    ));\n    return children;\n}\n\nfunction ArrayField(props) {\n    return (\n        <Widget\n            {...props}\n            onChildAdd={onChildAdd(props)}\n            onChildRemove={onChildRemove(props)}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default fromDefaultValue(ArrayField);\n","import ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n    object: ObjectField,\n    string: StringField,\n    number: NumberField,\n    boolean: BooleanField,\n    array: ArrayField\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction visibility(Comp) {\n    function Visible(props) {\n        const { schema: { visible }, value } = props;\n        if (visible && !visible(value, props.actions.getFormValue())) {\n            return null;\n        }\n        return (<Comp {...props} />);\n    }\n\n    Visible.propTypes = {\n        schema: PropTypes.shape({\n            visible: PropTypes.func\n        }).isRequired,\n        actions: PropTypes.objectOf(PropTypes.func).isRequired,\n        value: PropTypes.any // eslint-disable-line\n    };\n    return Visible;\n}\n\nexport default visibility;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Undefined(props) {\n    return (<span>{`Undefined field type \"${props.schema.type}\", [${props.path}]`}</span>);\n}\n\nUndefined.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n            PropTypes.arrayOf(\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n            )\n        ]).isRequired\n    }).isRequired,\n    path: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Undefined;\n","export default function infer(value) {\n    switch (typeof value) {\n    case 'number':\n        return 'number';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'boolean';\n    case 'object':\n        return Array.isArray(value) ? 'array' : 'object';\n    default:\n        return 'string';\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport infer from './../../Utils/infer';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath, editKey) {\n    if (editKey) {\n        return currentPath.concat([editKey]);\n    }\n    return currentPath;\n}\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param {React.Component} Comp component to decorate.\n * @return {React.Component} the decorated component.\n */\nfunction inference(Comp) {\n    function Infer(props) {\n        const { schema } = props;\n        const path = updatePath(props.path, props.editKey);\n        let inferedSchema = schema;\n        if (!inferedSchema || !('type' in inferedSchema)) {\n            inferedSchema = { type: infer(props.value) };\n            // props.actions.updateSchema(path, schema);\n        }\n        return (\n            <Comp\n                {...props}\n                path={path}\n                schema={inferedSchema}\n            />\n        );\n    }\n\n    Infer.propTypes = {\n        schema: PropTypes.object, // eslint-disable-line\n        value: PropTypes.any, // eslint-disable-line\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        editKey: PropTypes.string // eslint-disable-line react/require-default-props\n    };\n    return Infer;\n}\n\nexport default inference;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\n\n\n/**\n * bind function callback with its path\n * @param {function(Array<String>)} func callback function to bind\n * @param {Array<string>} path the value's path to act on\n */\nfunction doAction(func, path) {\n    return function action(...args) {\n        func(path, ...args);\n    };\n}\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = doAction(props.actions.update, props.path);\n    }\n    shouldComponentUpdate(...args) {\n        return shouldPureComponentUpdate.apply(this, args);\n    }\n    render() {\n        const { schema: { type } } = this.props;\n        const renderType = Array.isArray(type) ? type.find(t => t !== 'null') : type;\n        const Type = Fields[renderType] || UndefinedField;\n        return (\n            <Type\n                {...this.props}\n                onChange={this.onChange}\n            />\n        );\n    }\n}\n\nSchemaType.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n            PropTypes.arrayOf(\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n            )\n        ]).isRequired\n    }).isRequired,\n    path: PropTypes.arrayOf(PropTypes.string).isRequired,\n    actions: PropTypes.objectOf(PropTypes.func).isRequired\n};\n\nexport default inference(visible(SchemaType));\n","const VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = 'state';\nconst ERRORS = 'errors';\nconst NOERRORS = [];\n\nexport function setErrors(tree, path, errors) {\n    const errorPath = [STATUS].concat(path).concat([ERRORS]);\n    const errorsCursor = tree.select(errorPath);\n    if (errors && errors.length && Array.isArray(errorsCursor.get())) {\n        errorsCursor.splice([0, errorsCursor.get().length]);\n        errorsCursor.concat(errors || []);\n    } else {\n        errorsCursor.set(errors || NOERRORS);\n    }\n}\n\n/**\n * Update a value in the tree\n *\n * @param {Baobab} tree the tree\n * @param {Array<string>} path path's value to update\n * @param value value to set\n * @param {Array<string>} errors errors relative to the value\n */\nexport function update(tree, path, value, errors) {\n    const statusPath = [STATUS].concat(path);\n    tree.set([VALUE].concat(path), value);\n    tree.set(statusPath.concat([STATE]), 'dirty');\n    setErrors(tree, path, errors);\n}\n\nexport function setDefaultValue(tree, path, value) {\n    tree.set([VALUE].concat(path), value);\n    tree.set([STATUS].concat(path).concat([STATE]), 'pristine');\n}\n\nexport function getStatus(tree, path) {\n    return tree.get([STATUS].concat(path).concat([STATE]));\n}\n\nexport function getErrors(tree, path) {\n    return tree.get([STATUS].concat(path).concat([ERRORS])) || NOERRORS;\n}\n\nexport function getFormValue(tree) {\n    return tree.get(VALUE);\n}\n/**\n * handle object's \"properties\" path and array's \"item\" path\n */\nfunction schemaPath(tree, path) {\n    return path.reduce((prev, val) => {\n        if (tree.get(prev).type === 'object') {\n            return prev.concat(['properties', val]);\n        } else if (tree.get(prev).type === 'array') {\n            return prev.concat(['items']);\n        }\n        return prev.concat([val]);\n    }, ['schema']);\n}\nexport function updateSchema(tree, path, value) {\n    const updatedPath = schemaPath(tree, path);\n    tree.set(updatedPath, value);\n}\n\nexport function deleteSchema(tree, path) {\n    const updatedPath = schemaPath(tree, path);\n    tree.unset(updatedPath);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { root, branch } from 'baobab-react/higher-order';\nimport createTree from '../Store/index';\nimport SchemaType from './SchemaType';\nimport * as actions from '../Store/actions';\nimport validate from './../Utils/customValidator';\n\nconst BranchedSchemaType = branch({\n    schema: 'schema',\n    status: 'status',\n    value: 'value'\n}, SchemaType);\nconst TYPES = ['string', 'number', 'boolean', 'object', 'array', 'null'];\n/**\n * Top Component\n */\nclass Container extends React.Component {\n    constructor(props) {\n        super(props);\n        this.tree = createTree();\n        this.updateTree(props.value, props.schema);\n        // should use dispatcher instead. from baobab-react v2\n        this.ACTIONS = {};\n        Object.keys(actions)\n            .forEach(action => (\n                this.ACTIONS[action] = actions[action].bind(this.tree, this.tree)\n            ));\n        this.rooted = root(this.tree, BranchedSchemaType);\n    }\n    componentWillReceiveProps(nextProps) {\n        this.updateTree(nextProps.value, nextProps.schema);\n    }\n    shouldComponentUpdate() {\n        return false;\n    }\n    componentWillUnmount() {\n        this.tree.release();\n    }\n    getValue() {\n        return this.tree.get('value');\n    }\n    updateTree(value, schema) {\n        this.tree.select('value').release();\n        this.tree.select('value').set(value);\n        this.tree.select('schema').set(schema);\n        this.tree.select('status').release();\n        this.tree.commit();\n        this.tree.select('value')\n            .on('update', event =>\n                this.props.onChange(\n                    event.data.currentData,\n                    validate(\n                        event.data.currentData,\n                        this.tree.get('schema'),\n                        event.data.currentData\n                    ).errors\n                )\n            );\n    }\n    validate() {\n        const validationResult = validate(this.tree.get('value'),\n            this.tree.get('schema'), this.tree.get('value'));\n        const { setErrors } = this.ACTIONS;\n        const errorMap = new Map();\n        // Collect each error associated with a given path\n        validationResult.errors.forEach((error) => {\n            const errors = errorMap.get(error.property) || [];\n            errors.push(error.message); // Add new error\n            errorMap.set(error.property, errors);\n        });\n        errorMap.forEach((value, key) => {\n            setErrors(key.split(/\\.|\\[|\\]/).filter(x => x !== '').slice(1), value);\n        });\n        return validationResult.errors;\n    }\n    render() {\n        const Rooted = this.rooted;\n        return (\n            <Rooted\n                onChange={this.props.onChange}\n                path={[]}\n                actions={this.ACTIONS}\n            />\n        );\n    }\n}\nContainer.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([PropTypes.oneOf(TYPES),\n            PropTypes.arrayOf(PropTypes.oneOf(TYPES))])\n    }),\n    value: PropTypes.any // eslint-disable-line\n};\nContainer.defaultProps = {\n    schema: {}\n};\n\nexport default Container;\n","import Container from './Comps/Container';\nimport { setDefaultWidgets } from './Comps/Views/index';\n\nContainer.setDefaultWidgets = setDefaultWidgets;\nexport default Container;\n"],"names":["schema","value","status","defaultValue","c","props","state","val","updateDefault","componentDidMount","notifyDefaultChange","componentWillReceiveProps","setState","nextProps","componentDidUpdate","actions","setDefaultValue","path","render","a","React","Component","type","required","className","requiredClassName","view","title","editKey","description","errorMessage","defaultProps","Label","target","func","event","checked","placeholder","onChange","onInputChange","Input","TextWidget","ArrowNumberWidget","CheckboxWidget","Children","map","children","onClick","onChildRemove","index","child","onChildAdd","ArrayWidget","ObjectWidget","choices","key","label","e","string","number","boolean","array","object","arrowNumber","select","SelectWidget","undefinedWidgetFactory","DefaultWidget","Object","assign","obj","defaultWidget","h","restSchema","Array","isArray","find","renderType","g","EMPTYOBJECT","customValidator","attributes","errored","SchemaError","instance","options","formValue","msg","validate","getErrors","getFormValue","validation","errors","message","err","property","properties","keys","forEach","v","mergedProperties","push","sort","indexFor","b","i","length","prop","SchemaType","defaultProperties","updateSchema","concat","Widget","addKey","removeKey","deleteSchema","alterKey","p","newKey","renderChildren","ObjectField","fromDefaultValue","StringField","d","boundChange","bind","isNaN","numVal","SimpleStringField","NumberField","BooleanField","oldValue","filter","items","onChildChange","ArrayField","visible","currentPath","updatePath","infer","inferedSchema","args","doAction","update","shouldComponentUpdate","apply","Fields","UndefinedField","STATUS","STATE","ERRORS","NOERRORS","tree","errorPath","errorsCursor","get","splice","set","VALUE","statusPath","setErrors","reduce","prev","schemaPath","updatedPath","unset","branch","TYPES","Container","createTree","updateTree","ACTIONS","action","rooted","root","BranchedSchemaType","componentWillUnmount","release","getValue","commit","on","data","currentData","errorMap","error","split","slice","validationResult","setDefaultWidgets"],"mappings":"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"}