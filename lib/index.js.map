{"version":3,"file":"index.js","sources":["../src/Store/index.js","../src/Comps/Views/undefinedWidgetFactory.js","../src/Comps/Decorators/labeled.js","../src/Comps/Views/Input.js","../src/Comps/Views/TextWidget.js","../src/Comps/Views/ArrowNumberWidget.js","../src/Comps/Views/CheckboxWidget.js","../src/Comps/Views/ArrayWidget.js","../src/Comps/Views/ObjectWidget.js","../src/Comps/Views/SelectWidget.js","../src/Comps/Views/index.js","../src/Comps/Views/Widget.js","../src/Utils/customValidator.js","../src/Comps/Decorators/validator.js","../src/Comps/Fields/Object.js","../src/Comps/Fields/String.js","../src/Comps/Fields/Number.js","../src/Comps/Fields/Boolean.js","../src/Comps/Fields/Array.js","../src/Comps/Fields/index.js","../src/Comps/Decorators/visible.js","../src/Comps/Fields/Undefined.js","../src/Utils/infer.js","../src/Comps/Decorators/inference.js","../src/Comps/Decorators/fromDefaultValue.js","../src/Comps/SchemaType.js","../src/Store/actions.js","../src/Comps/Container.js","../src/index.js"],"sourcesContent":["import Baobab from 'baobab';\n\nconst createTree = () => new Baobab({\n    schema: {},\n    value: {},\n    status: {}\n});\n\nexport default createTree;\n","import React from 'react';\n\nfunction undefinedWidgetFactory(type) {\n    return function UndefinedWidget() {\n        return (\n            <span>\n                {`Widget for '${type}' was not defined`}\n            </span>\n        );\n    };\n}\n\nexport default undefinedWidgetFactory;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction labeled(Comp) {\n    function Label(props) {\n        const required = props.schema.required;\n        const requiredClassName = required ? 'required' : '';\n        return (\n            <div>\n                <label //eslint-disable-line\n                    className={`${props.schema.type}Field ${requiredClassName}`}\n                >\n                    <span className=\"title\">{props.view.title || props.editKey}</span>\n                    <Comp {...props} />\n                    <span>{props.view.description}</span>\n                    <span>{props.errorMessage}</span>\n                </label>\n            </div>\n        );\n    }\n\n    Label.propTypes = {\n        schema: PropTypes.shape({\n            type: PropTypes.oneOfType([\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n                PropTypes.arrayOf(\n                    PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n                )\n            ]).isRequired,\n            required: PropTypes.bool,\n            description: PropTypes.string\n        }).isRequired,\n        editKey: PropTypes.string,\n        view: PropTypes.shape({\n            title: PropTypes.string,\n            description: PropTypes.string\n        }).isRequired,\n        errorMessage: PropTypes.arrayOf(PropTypes.string)\n    };\n    Label.defaultProps = {\n        editKey: '',\n        errorMessage: []\n    };\n    return Label;\n}\n\nexport default labeled;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction onInputChange(func) {\n    return function onChange(event) {\n        if (event.target.type === 'checkbox') {\n            func(event.target.checked);\n        } else {\n            func(event.target.value);\n        }\n    };\n}\n\nfunction Input(props) {\n    return (\n        <input\n            type={props.type}\n            placeholder={props.schema.placeholder}\n            value={props.value}\n            className={props.className}\n            onChange={onInputChange(props.onChange)}\n            checked={props.checked}\n        />\n    );\n}\n\nInput.propTypes = {\n    type: PropTypes.string.isRequired,\n    className: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    checked: PropTypes.bool,\n    value: PropTypes.any, // eslint-disable-line\n    schema: PropTypes.shape({\n        placeholder: PropTypes.string\n    }).isRequired\n};\nInput.defaultProps = {\n    className: undefined,\n    checked: false\n};\nexport default Input;\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction TextWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"string\"\n        />\n    );\n}\n\nexport default labeled(TextWidget);\n","import React from 'react';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction ArrowNumberWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"number\"\n        />\n    );\n}\n\nexport default labeled(ArrowNumberWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\nimport Input from './Input';\n\nfunction CheckboxWidget(props) {\n    return (\n        <Input\n            {...props}\n            type=\"checkbox\"\n            checked={props.value}\n        />\n    );\n}\n\nCheckboxWidget.propTypes = {\n    value: PropTypes.bool\n};\nCheckboxWidget.defaultProps = { value: false };\n\nexport default labeled(CheckboxWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ArrayWidget(props) {\n    function renderChild(child, index) {\n        return (<div>\n            <button onClick={props.onChildRemove(index)}>-</button>\n            {child}\n        </div>);\n    }\n\n    const children = React.Children.map(props.children, renderChild);\n    return (\n        <div>\n            <div>\n                {children}\n            </div>\n            <button onClick={props.onChildAdd}>+</button>\n        </div>\n    );\n}\n\nArrayWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired,\n    onChildRemove: PropTypes.func.isRequired, // eslint-disable-line react/no-unused-prop-types\n    onChildAdd: PropTypes.func.isRequired\n};\nexport default labeled(ArrayWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport labeled from '../Decorators/labeled';\n\nfunction ObjectWidget(props) {\n    return (\n        <div>\n            {props.children}\n        </div>\n    );\n}\n\nObjectWidget.propTypes = {\n    children: PropTypes.arrayOf(PropTypes.element).isRequired\n};\n\nexport default labeled(ObjectWidget);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction SelectWidget({ view, value, onChange }) {\n    const choices = view.choices.map(c => (\n        <option\n            key={c.value}\n            value={c.value}\n        >\n            {c.label}\n        </option>\n    ));\n    return (\n        <select value={value} onChange={e => onChange(e.target.value)}>\n            {choices}\n        </select>\n    );\n}\nSelectWidget.propTypes = {\n    view: PropTypes.shape({\n        choices: PropTypes.arrayOf(PropTypes.shape({\n            value: PropTypes.any,\n            label: PropTypes.string.isRequired\n        })).isRequired\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line\n    onChange: PropTypes.func.isRequired\n};\nexport default SelectWidget;\n","import undefinedWidgetFactory from './undefinedWidgetFactory';\nimport TextWidget from './TextWidget';\nimport ArrowNumberWidget from './ArrowNumberWidget';\nimport CheckboxWidget from './CheckboxWidget';\nimport ArrayWidget from './ArrayWidget';\nimport ObjectWidget from './ObjectWidget';\nimport SelectWidget from './SelectWidget';\n\nlet DefaultWidget = {\n    string: TextWidget,\n    number: TextWidget,\n    boolean: CheckboxWidget,\n    array: ArrayWidget,\n    object: ObjectWidget,\n    arrowNumber: ArrowNumberWidget,\n    select: SelectWidget\n};\n\nfunction defaultWidget(type) {\n    return DefaultWidget[type] || undefinedWidgetFactory(type);\n}\n\nfunction setDefaultWidgets(obj) {\n    DefaultWidget = Object.assign({}, DefaultWidget, obj);\n}\n\nexport { defaultWidget, setDefaultWidgets, undefinedWidgetFactory };\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { defaultWidget } from './index';\n\nconst EMPTYOBJECT = {};\nfunction Widget(props) {\n    const { schema } = props;\n    const { view, ...restSchema } = schema;\n    if (view) {\n        const { type } = view;\n        if (typeof type === 'string') {\n            const Wdgt = defaultWidget(type);\n            return (\n                <Wdgt\n                    {...props}\n                    schema={restSchema}\n                    view={view}\n                />\n            );\n        }\n        if (typeof type === 'function') {\n            const Type = type;\n            return (\n                <Type\n                    {...props}\n                    schema={restSchema}\n                    view={view}\n                />\n            );\n        }\n    }\n    const renderType = Array.isArray(schema.type) ?\n        schema.type.find(t => t !== 'null') :\n        schema.type;\n    const Wdgt = defaultWidget(renderType);\n    return (\n        <Wdgt\n            {...props}\n            schema={restSchema}\n            view={view || EMPTYOBJECT}\n        />\n    );\n}\n\nWidget.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.string,\n            PropTypes.arrayOf(PropTypes.string)\n        ]).isRequired\n    }).isRequired\n};\nexport default Widget;\n","import jsonschema, { Validator } from 'jsonschema';\n\nconst customValidator = new Validator();\ncustomValidator.attributes.errored = function validateErrored(\n    instance,\n    schema,\n    options\n) {\n    if (typeof schema.errored !== 'function') {\n        throw new jsonschema.SchemaError('\"errored\" expects a function');\n    }\n    const msg = schema.errored(instance, options.formValue);\n    if (msg) {\n        return msg;\n    }\n    return undefined;\n};\nfunction validate(value, schema, formValue) {\n    return customValidator.validate(value, schema, {\n        formValue\n    });\n}\n\nexport default validate;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validate from './../../Utils/customValidator';\n\nfunction validated(Comp) {\n    function Validator(props) {\n        function onChange(val) {\n            const validation = validate(val, props.schema, props.actions.getFormValue());\n            const err = validation.errors.map(error => error.message);\n            props.onChange(val, err);\n        }\n\n        return (\n            <Comp\n                {...props}\n                errorMessage={props.actions.getErrors(props.path)}\n                onChange={onChange}\n            />\n        );\n    }\n\n    Validator.propTypes = {\n        onChange: PropTypes.func.isRequired,\n        schema: PropTypes.shape({\n            errored: PropTypes.func\n        }).isRequired,\n        value: PropTypes.any, // eslint-disable-line\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        actions: PropTypes.objectOf(PropTypes.func).isRequired\n    };\n    return Validator;\n}\n\nexport default validated;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\n\nfunction renderChildren(props) {\n    const children = [];\n    const properties = props.schema.properties || {};\n    const value = props.value || {};\n    // Holds schema properties and value properties missing from schema.\n    const mergedProperties = Object.keys(properties);\n\n    Object.keys(value).forEach((v) => {\n        if (v in properties) {\n            return;\n        }\n        mergedProperties.push(v);\n    });\n    function indexFor(property) {\n        if (properties[property] && typeof properties[property].index === 'number') {\n            return properties[property].index;\n        }\n        return 0;\n    }\n    // Index based sorting\n    function sortProperties(a, b) {\n        return indexFor(a) - indexFor(b);\n    }\n\n    mergedProperties.sort(sortProperties);\n    for (let i = 0; i < mergedProperties.length; i += 1) {\n        const prop = mergedProperties[i];\n        if (prop in properties) {\n            children.push(\n                <SchemaType\n                    {...props}\n                    schema={properties[prop]}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        } else {\n            const schema = props.schema.defaultProperties;\n            if (schema) {\n                props.actions.updateSchema(props.path.concat([prop]), schema);\n            }\n            children.push(\n                <SchemaType\n                    {...props}\n                    schema={schema}\n                    value={value[prop]}\n                    editKey={prop}\n                    key={prop}\n                />\n            );\n        }\n    }\n    return children;\n}\n\nfunction ObjectField(props) {\n    function addKey(key, value) {\n        props.onChange(Object.assign({}, props.value, {\n            [key]: value\n        }));\n    }\n\n    function removeKey(key) {\n        const value = Object.assign({}, props.value);\n        delete value[key];\n        props.actions.deleteSchema(props.path.concat([key]), {});\n        props.onChange(value);\n    }\n\n    function alterKey(key, newKey) {\n        const value = {};\n        Object.keys(props.value).forEach((p) => {\n            if (p !== key) {\n                value[p] = props.value[p];\n            } else {\n                value[newKey] = props.value[p];\n            }\n        });\n        props.onChange(value);\n    }\n    return (\n        <Widget\n            {...props}\n            addKey={addKey}\n            removeKey={removeKey}\n            alterKey={alterKey}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nObjectField.propTypes = {\n    schema: PropTypes.shape({ // eslint-disable-line react/no-unused-prop-types\n        properties: PropTypes.object\n    }).isRequired,\n    value: PropTypes.any, // eslint-disable-line react/forbid-prop-types\n    path: PropTypes.arrayOf( // eslint-disable-line react/no-unused-prop-types\n        PropTypes.string\n    ).isRequired,\n    onChange: PropTypes.func.isRequired\n};\nObjectField.defaultProps = {\n    value: {}\n};\n\nexport default validator(ObjectField);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nfunction StringField(props) {\n    const val = props.value !== undefined && props.value !== null ?\n        String(props.value) :\n        props.value;\n    return (\n        <Widget\n            {...props}\n            value={val}\n        />\n    );\n}\n\nStringField.propTypes = {\n    value: PropTypes.oneOfType([ // eslint-disable-line react/require-default-props\n        PropTypes.number,\n        PropTypes.string\n    ])\n};\nexport { StringField as SimpleStringField };\nexport default validator(StringField);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport validator from '../Decorators/validator';\nimport { SimpleStringField } from './String';\n\nclass NumberField extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: props.value\n        };\n        this.boundChange = this.onChange.bind(this);\n    }\n    componentWillReceiveProps(nextProps) {\n        // if numerical values differ: update\n        if (Number(this.state.value) !== Number(nextProps.value)) {\n            this.setState({\n                value: nextProps.value\n            });\n        }\n    }\n    onChange(val) {\n        const value = val === '' ? undefined : val;\n        const numVal = Number(value);\n        this.setState({\n            value\n        }, () => this.props.onChange(isNaN(numVal) ? value : numVal));\n    }\n    render() {\n        return (\n            <SimpleStringField\n                {...this.props}\n                value={this.state.value}\n                onChange={this.boundChange}\n            />\n        );\n    }\n}\nNumberField.propTypes = {\n    value: PropTypes.number, // eslint-disable-line react/require-default-props\n    onChange: PropTypes.func.isRequired\n};\n\nexport default validator(NumberField);\n","import React from 'react';\nimport Widget from '../Views/Widget';\nimport validator from './../Decorators/validator';\n\nfunction BooleanField(props) {\n    return (<Widget {...props} />);\n}\n\nexport default validator(BooleanField);\n","import React from 'react';\nimport SchemaType from '../SchemaType';\nimport Widget from '../Views/Widget';\nimport validator from '../Decorators/validator';\n\nfunction onChildChange(index, props) {\n    return function onChange(val) {\n        const { value } = props;\n        if (value) {\n            props.onChange(value.map((e, i) => {\n                if (+i !== +index) {\n                    return e;\n                }\n                return val;\n            }));\n        } else {\n            props.onChange([val]);\n        }\n    };\n}\n\nfunction onChildRemove(props) {\n    return function onRemove(index) {\n        return function doRemove() {\n            const oldValue = props.value || [];\n            props.onChange(oldValue.filter((e, i) => Number(i) !== Number(index)));\n        };\n    };\n}\n\nfunction onChildAdd(props) {\n    return function onAdd() {\n        const oldValue = props.value || [];\n        props.onChange(oldValue.concat([undefined]));\n    };\n}\n\nfunction renderChildren(props) {\n    const { value, schema: { defaultValue, items } } = props;\n    let valueItems;\n    if (value) {\n        valueItems = value;\n    } else if (defaultValue) {\n        valueItems = defaultValue;\n    } else {\n        valueItems = [];\n    }\n    const children = [];\n    valueItems.forEach((val, i) => children.push(\n        <SchemaType\n            {...props}\n            schema={Array.isArray(items) ? (items[i] || {}) : items}\n            value={val}\n            editKey={String(i)}\n            key={i}\n            onChange={onChildChange(i, props)}\n        />\n    ));\n    return children;\n}\n\nfunction ArrayField(props) {\n    return (\n        <Widget\n            {...props}\n            onChildAdd={onChildAdd(props)}\n            onChildRemove={onChildRemove(props)}\n        >\n            {renderChildren(props)}\n        </Widget>\n    );\n}\n\nexport default validator(ArrayField);\n","import ObjectField from './Object';\nimport StringField from './String';\nimport NumberField from './Number';\nimport BooleanField from './Boolean';\nimport ArrayField from './Array';\n\nexport default {\n    object: ObjectField,\n    string: StringField,\n    number: NumberField,\n    boolean: BooleanField,\n    array: ArrayField\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction visibility(Comp) {\n    function Visible(props) {\n        const { schema: { visible }, value } = props;\n        if (visible && !visible(value, props.actions.getFormValue())) {\n            return null;\n        }\n        return (<Comp {...props} />);\n    }\n\n    Visible.propTypes = {\n        schema: PropTypes.shape({\n            visible: PropTypes.func\n        }).isRequired,\n        actions: PropTypes.objectOf(PropTypes.func).isRequired,\n        value: PropTypes.any // eslint-disable-line\n    };\n    return Visible;\n}\n\nexport default visibility;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction Undefined(props) {\n    return (<span>{`Undefined field type \"${props.schema.type}\", [${props.path}]`}</span>);\n}\n\nUndefined.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n            PropTypes.arrayOf(\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n            )\n        ]).isRequired\n    }).isRequired,\n    path: PropTypes.arrayOf(PropTypes.string).isRequired\n};\nexport default Undefined;\n","export default function infer(value) {\n    switch (typeof value) {\n    case 'number':\n        return 'number';\n    case 'string':\n        return 'string';\n    case 'boolean':\n        return 'boolean';\n    case 'object':\n        return Array.isArray(value) ? 'array' : 'object';\n    default:\n        return 'string';\n    }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport infer from './../../Utils/infer';\n/**\n * Update store's value path.\n * @param {Array<string>} currentValuePath the valuePath the parent\n * @param {string} editKey the key currently edited\n * @returns {Array<string>}the updated valuePath\n */\nfunction updatePath(currentPath, editKey) {\n    if (editKey) {\n        return currentPath.concat([editKey]);\n    }\n    return currentPath;\n}\n\n/**\n * HOC, compute schema value from inferred type if schema is missing\n * @param {React.Component} Comp component to decorate.\n * @return {React.Component} the decorated component.\n */\nfunction inference(Comp) {\n    function Infer(props) {\n        const { schema } = props;\n        const path = updatePath(props.path, props.editKey);\n        let inferedSchema = schema;\n        if (!inferedSchema || !('type' in inferedSchema)) {\n            inferedSchema = { type: infer(props.value) };\n            // props.actions.updateSchema(path, schema);\n        }\n        return (\n            <Comp\n                {...props}\n                path={path}\n                schema={inferedSchema}\n            />\n        );\n    }\n\n    Infer.propTypes = {\n        schema: PropTypes.object, // eslint-disable-line\n        value: PropTypes.any, // eslint-disable-line\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        editKey: PropTypes.string // eslint-disable-line react/require-default-props\n    };\n    return Infer;\n}\n\nexport default inference;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction updateDefault({ value, schema: { value: defaultValue } }) {\n    const val = value !== undefined ? value : defaultValue;\n    return val;\n}\n\nfunction fromDefaultValue(Comp) {\n    class DefaultValue extends React.Component {\n        constructor(props) {\n            super(props);\n            this.state = { val: updateDefault(props) };\n        }\n        componentDidMount() {\n            this.notifyDefaultChange();\n        }\n        componentWillReceiveProps(nextProps) {\n            this.setState({ val: updateDefault(nextProps) });\n        }\n        componentDidUpdate() {\n            this.notifyDefaultChange();\n        }\n        notifyDefaultChange() {\n            if (this.props.value !== this.state.val) {\n                this.props.actions.setDefaultValue(this.props.path, this.state.val);\n            }\n        }\n        render() {\n            return (<Comp {...this.props} value={this.state.val} />);\n        }\n    }\n\n    DefaultValue.propTypes = {\n        value: PropTypes.any, // eslint-disable-line\n        schema: PropTypes.shape({ // eslint-disable-line\n            value: PropTypes.any\n        }).isRequired,\n        path: PropTypes.arrayOf(PropTypes.string).isRequired,\n        actions: PropTypes.shape({\n            setDefaultValue: PropTypes.func.isRequired\n        }).isRequired\n    };\n    return DefaultValue;\n}\n\nexport default fromDefaultValue;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport shouldPureComponentUpdate from 'react-pure-render/function';\nimport Fields from './Fields/index';\nimport visible from './Decorators/visible';\nimport UndefinedField from './Fields/Undefined';\nimport inference from './Decorators/inference';\nimport fromDefaultValue from './Decorators/fromDefaultValue';\n\n\n/**\n * bind function callback with its path\n * @param {function(Array<String>)} func callback function to bind\n * @param {Array<string>} path the value's path to act on\n */\nfunction doAction(func, path) {\n    return function action(...args) {\n        func(path, ...args);\n    };\n}\n\n/**\n * Component generating the correct field based on schema.type\n * @constructor\n * @param {Object} props\n */\nclass SchemaType extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onChange = doAction(props.actions.update, props.path);\n    }\n    shouldComponentUpdate(...args) {\n        return shouldPureComponentUpdate.apply(this, args);\n    }\n    render() {\n        const { schema: { type } } = this.props;\n        const renderType = Array.isArray(type) ? type.find(t => t !== 'null') : type;\n        const Type = Fields[renderType] || UndefinedField;\n        return (\n            <Type\n                {...this.props}\n                onChange={this.onChange}\n            />\n        );\n    }\n}\n\nSchemaType.propTypes = {\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([\n            PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean']),\n            PropTypes.arrayOf(\n                PropTypes.oneOf(['object', 'string', 'number', 'array', 'boolean', 'null'])\n            )\n        ]).isRequired\n    }).isRequired,\n    path: PropTypes.arrayOf(PropTypes.string).isRequired,\n    actions: PropTypes.objectOf(PropTypes.func).isRequired\n};\n\nexport default inference(fromDefaultValue(visible(SchemaType)));\n","const VALUE = 'value';\nconst STATUS = 'status';\nconst STATE = 'state';\nconst ERRORS = 'errors';\nconst NOERRORS = [];\n\nexport function setErrors(tree, path, errors) {\n    const errorPath = [STATUS].concat(path).concat([ERRORS]);\n    const errorsCursor = tree.select(errorPath);\n    if (errors && errors.length && Array.isArray(errorsCursor.get())) {\n        errorsCursor.splice([0, errorsCursor.get().length]);\n        errorsCursor.concat(errors || []);\n    } else {\n        errorsCursor.set(errors || NOERRORS);\n    }\n}\n\n/**\n * Update a value in the tree\n *\n * @param {Baobab} tree the tree\n * @param {Array<string>} path path's value to update\n * @param value value to set\n * @param {Array<string>} errors errors relative to the value\n */\nexport function update(tree, path, value, errors) {\n    const statusPath = [STATUS].concat(path);\n    tree.set([VALUE].concat(path), value);\n    tree.set(statusPath.concat([STATE]), 'dirty');\n    setErrors(tree, path, errors);\n}\n\nexport function setDefaultValue(tree, path, value) {\n    tree.set([VALUE].concat(path), value);\n    tree.set([STATUS].concat(path).concat([STATE]), 'pristine');\n}\n\nexport function getStatus(tree, path) {\n    return tree.get([STATUS].concat(path).concat([STATE]));\n}\n\nexport function getErrors(tree, path) {\n    return tree.get([STATUS].concat(path).concat([ERRORS])) || NOERRORS;\n}\n\nexport function getFormValue(tree) {\n    return tree.get(VALUE);\n}\n/**\n * handle object's \"properties\" path and array's \"item\" path\n */\nfunction schemaPath(tree, path) {\n    return path.reduce((prev, val) => {\n        if (tree.get(prev).type === 'object') {\n            return prev.concat(['properties', val]);\n        } else if (tree.get(prev).type === 'array') {\n            return prev.concat(['items']);\n        }\n        return prev.concat([val]);\n    }, ['schema']);\n}\nexport function updateSchema(tree, path, value) {\n    const updatedPath = schemaPath(tree, path);\n    tree.set(updatedPath, value);\n}\n\nexport function deleteSchema(tree, path) {\n    const updatedPath = schemaPath(tree, path);\n    tree.unset(updatedPath);\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { root, branch } from 'baobab-react/higher-order';\nimport createTree from '../Store/index';\nimport SchemaType from './SchemaType';\nimport * as actions from '../Store/actions';\nimport validate from './../Utils/customValidator';\n\nconst BranchedSchemaType = branch({\n    schema: 'schema',\n    status: 'status',\n    value: 'value'\n}, SchemaType);\nconst TYPES = ['string', 'number', 'boolean', 'object', 'array', 'null'];\n/**\n * Top Component\n */\nclass Container extends React.Component {\n    constructor(props) {\n        super(props);\n        this.tree = createTree();\n        this.updateTree(props.value, props.schema);\n        // should use dispatcher instead. from baobab-react v2\n        this.ACTIONS = {};\n        Object.keys(actions)\n            .forEach(action => (\n                this.ACTIONS[action] = actions[action].bind(this.tree, this.tree)\n            ));\n        this.rooted = root(this.tree, BranchedSchemaType);\n    }\n    componentWillReceiveProps(nextProps) {\n        this.updateTree(nextProps.value, nextProps.schema);\n    }\n    shouldComponentUpdate() {\n        return false;\n    }\n    componentWillUnmount() {\n        this.tree.release();\n    }\n    getValue() {\n        return this.tree.get('value');\n    }\n    updateTree(value, schema) {\n        this.tree.select('value').release();\n        this.tree.select('value').set(value);\n        this.tree.select('schema').set(schema);\n        this.tree.select('status').release();\n        this.tree.commit();\n        this.tree.select('value')\n            .on('update', event =>\n                this.props.onChange(\n                    event.data.currentData,\n                    validate(\n                        event.data.currentData,\n                        this.tree.get('schema'),\n                        event.data.currentData\n                    ).errors\n                )\n            );\n    }\n    validate() {\n        const validationResult = validate(this.tree.get('value'),\n            this.tree.get('schema'), this.tree.get('value'));\n        const { setErrors } = this.ACTIONS;\n        const errorMap = new Map();\n        // Collect each error associated with a given path\n        validationResult.errors.forEach((error) => {\n            const errors = errorMap.get(error.property) || [];\n            errors.push(error.message); // Add new error\n            errorMap.set(error.property, errors);\n        });\n        errorMap.forEach((value, key) => {\n            setErrors(key.split(/\\.|\\[|\\]/).filter(x => x !== '').slice(1), value);\n        });\n        return validationResult.errors;\n    }\n    render() {\n        const Rooted = this.rooted;\n        return (\n            <Rooted\n                onChange={this.props.onChange}\n                path={[]}\n                actions={this.ACTIONS}\n            />\n        );\n    }\n}\nContainer.propTypes = {\n    onChange: PropTypes.func.isRequired,\n    schema: PropTypes.shape({\n        type: PropTypes.oneOfType([PropTypes.oneOf(TYPES),\n            PropTypes.arrayOf(PropTypes.oneOf(TYPES))])\n    }),\n    value: PropTypes.any // eslint-disable-line\n};\nContainer.defaultProps = {\n    schema: {}\n};\n\nexport default Container;\n","import Container from './Comps/Container';\nimport { setDefaultWidgets } from './Comps/Views/index';\n\nContainer.setDefaultWidgets = setDefaultWidgets;\nexport default Container;\n"],"names":["schema","value","status","type","props","required","React","className","requiredClassName","view","title","editKey","a","description","errorMessage","defaultProps","Label","target","func","event","checked","placeholder","onChange","onInputChange","Input","TextWidget","ArrowNumberWidget","CheckboxWidget","Children","map","children","onClick","onChildRemove","index","child","onChildAdd","ArrayWidget","ObjectWidget","choices","key","c","label","e","string","number","boolean","array","object","arrowNumber","select","SelectWidget","undefinedWidgetFactory","DefaultWidget","Object","assign","obj","defaultWidget","h","restSchema","Array","isArray","find","renderType","g","EMPTYOBJECT","customValidator","attributes","errored","SchemaError","instance","options","formValue","msg","validate","actions","getErrors","path","val","getFormValue","validation","errors","message","err","property","properties","keys","forEach","v","mergedProperties","push","sort","indexFor","b","i","length","prop","SchemaType","defaultProperties","updateSchema","concat","Widget","addKey","removeKey","deleteSchema","alterKey","p","newKey","renderChildren","ObjectField","StringField","state","d","boundChange","bind","componentWillReceiveProps","nextProps","setState","isNaN","numVal","render","SimpleStringField","Component","NumberField","BooleanField","oldValue","filter","defaultValue","items","onChildChange","ArrayField","visible","currentPath","updatePath","infer","inferedSchema","updateDefault","componentDidMount","notifyDefaultChange","componentDidUpdate","setDefaultValue","args","doAction","update","shouldComponentUpdate","apply","Fields","UndefinedField","fromDefaultValue","STATUS","STATE","ERRORS","NOERRORS","tree","errorPath","errorsCursor","get","splice","set","VALUE","statusPath","setErrors","reduce","prev","schemaPath","updatedPath","unset","branch","TYPES","Container","createTree","updateTree","ACTIONS","action","rooted","root","BranchedSchemaType","componentWillUnmount","release","getValue","commit","on","data","currentData","errorMap","error","split","slice","validationResult","setDefaultWidgets"],"mappings":"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"}